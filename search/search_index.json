{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Knowledge Base","text":"<p>\"Your mind is for having ideas, not holding them.\"</p> <p>--David Allen</p>"},{"location":"#what-and-why","title":"What and Why?","text":"<p>I had scattered sets of bookmarks/links in various places and pretty common situations were that I just simply lost my links. This was very embarrasing and I started to search how I can store all my resources in some centralized system.</p> <p>I was lucky and found MkDocs.</p> <p>Here is aggregated links and usefull resources database for (web) developers.</p> <p>Feel free to use this information in any ways (including repo cloning). If you would like something to add to the KnowledgeBase, just create a pull request after editing <code>*.md</code> files in <code>./docs</code> folder. Use the <code>main</code> branch!</p>"},{"location":"#how-to-learn","title":"How to learn","text":"<p>Learning How to Learn</p> <p>Free Coursera course: 15 hours beginner course. Powerful mental tools to help you master tough subjects.</p> <p>How to Remember More of What You Learn with Spaced Repetition</p> <p>How to have all yor API documentation in one place a couple of keystrokes away</p> <p>The Algorithms library</p> <p>If you like what you see here, you can buy me a coffee. Thanks!</p>"},{"location":"00CoreProgrammingConcepts/","title":"Basic Programming Knowledge","text":"<p>Memory Allocation</p> <p>\u203a malloc and free</p> <p>To understand the job of a memory allocator, it's essential to understand how programs request and return memory. malloc and free are functions that were first introduced in a recognisable form in UNIX v7 in 1979(!). Let's take a look at a short C program demonstrating their use.</p> <p>The Twelve-Factor App</p> <p>The twelve-factor methodology can be applied to apps written in any programming language, and which use any combination of backing services (database, queue, memory cache, etc).</p>"},{"location":"00ProjectIdeas/","title":"Project ideas","text":"<p>Ideas for projects to build for your portfolio.</p> <p>16 front-end projects (with designs) to help improve your coding skills</p> <p>Projects to build that would get you hired as a beginner. - DEV</p> <p>Frontend Mentor | Front-end coding challenges using a real-life workflow</p> <p>Solve real-world HTML, CSS and JavaScript challenges whilst working to professional designs. Join 234,822 developers building projects, reviewing code, and helping each other get better.</p> <p>How to create a dashboard in Python with Jupyter Notebook?</p> <p>The demo of the financial dashboard created in Python with Jupyter Notebook and published with Mercury</p> <p>A collective list of free APIs</p>"},{"location":"00Resources/","title":"Resources","text":""},{"location":"00Resources/#career-management","title":"Career management","text":"<p>Eastern European Guide to Writing Reference Letters</p>"},{"location":"00Resources/#general-resources","title":"General resources","text":"<p>This is collection of usefull resources to help progress on Your path to become a Web Developer.</p> <p>How to Design Programs, Second Edition</p> <p>Tech Interview HandBook</p> <p>W3C.org - the web standard</p> <p>DevDocs API Documentation - (Almost) all documentation in one place</p> <p>MDN Web Docs</p> <p>W3schools</p>"},{"location":"00Resources/#variuos-resources","title":"Variuos resources","text":"<p>Free for developers</p> <p>Developers and Open Source authors now have a massive amount of services offering free tiers, but it can be hard to find them all to make informed decisions.</p> <p>This is a list of software (SaaS, PaaS, IaaS, etc.) and other offerings that have free tiers for developers.</p> <p>Use DevTools like a PRO</p> <p>Free hosting services for web developers - DEV Community</p> <p>Become a programmer: The missing lessons - DEV</p> <p>Resources to become a Well-Rounded Full-Stack Developer | Azure SQL Devs\u2019 Corner</p> <p>A career in web development in 2021</p> <p>Emmet shortcuts and docs</p> <p>5 GitHub Repos for creating Resumes - DEV Community - Why write a resume when we can code it.</p> <p>Faster &amp; GDPR friendly Fonts</p> <p>Bunny Fonts is an open-source, privacy-first web font platform designed to put privacy back into the internet.</p> <p>With a zero-tracking and no-logging policy, Bunny Fonts helps you stay fully GDPR compliant and puts your user's personal data into their own hands. Additionally, you can enjoy lightning-fast load times thanks to bunny.net's global CDN network to help improve SEO and deliver a better user experience. </p>"},{"location":"00Resources/#readinginfo","title":"Reading/Info","text":"<p>Five books to read for software engineer</p> <ol> <li>The Passionate Programmer: Creating a Remarkable Career in Software Development</li> <li>The Pragmatic Programmer - your journey to mastery(20th Anniversary Edition)</li> <li>Unwritten Laws of Engineering - Second Edition</li> <li>Remote: Office Not Required</li> <li>Explain the Cloud Like I\u2019m 10</li> </ol> <p>How To Learn Stuff Quickly</p> <p>It's often said that the internet has democratized education: the sum of human knowledge is only a Google search away! And yet, having access to information is only half of the story; you also need to be able to convert raw information into usable skills.</p> <p>For a lot of us, the gap between the two can lead to things like tutorial hell\u2014getting stuck doing tutorial after tutorial without ever feeling like you're making substantive progress.</p> <p>How to Go From Coding Tutorials to Building Apps in 5 Steps - DEV Community</p> <p>Useful Resources To Learn Web Development &amp; To Create Your Website</p> <p>Tips You Should know for Visual Studio Code - VSCode</p> <p>Learning Tips for Programmers \u00b7 We Learn Code</p> <p>7 Useful VS Code extension for junior web developers - DEV Community</p> <p>Self tought Software Engineer thoughts on learning</p> <p>4 Books that are not about computers that made me a good Software Developer</p> <p>Everything You Need to Know About Forming a Professional Support Network - CodeNewbie Community</p> <p>17 Website Templates HTML Free Download - DEV Community</p>"},{"location":"00ServerConfig/","title":"Server Setup Basics","text":"<p>Original post</p> <p>This is a post I've been meaning to do for a while. While it's simple to explain how to set up an app for self-hosting, it's pointless to host an app on a weak foundation. It's a massive pain in my ass to start every how to with a section on server setup, so I'm also making this post for myself as a reference on how I like to set up a server for apps I'm hosting. I'll start with basic stuff like proper login with SSH and non-root user set up and making users for each app. I'll also touch on NGINX setup, some quality of life tools that make server management easier, log management and basic network security. \u200d  </p> <ul> <li>Server Setup Basics</li> <li>SSH</li> <li>Users</li> <li>Logs</li> <li>Backups</li> <li>Basic Network Safety</li> <li>UFW</li> <li>Fail2Ban</li> <li>NGINX</li> <li>Quality Of Life Tools</li> <li>DNS</li> <li>Docker<ul> <li>Docker Pros</li> <li>Docker Cons</li> </ul> </li> <li>Wrap Up</li> </ul>"},{"location":"00ServerConfig/#ssh","title":"SSH","text":"<p>First is login. You\u2019ll need a way to access your device securely. Don't even mess with username and password. You want to use SSH (Secure Shell) and make sure that SSH is the only way to log in. To do that, you\u2019ll need an SSH key and a new user account. On a newly provisioned VPS, you'll be logged in as root, and you want to protect the root account. First off on the VPS or remote machine make a new regular user with and add them to the \u201csudo\u201d group with:</p> <pre><code>sudo adduser newuser\n\nsudo usermod -aG sudo newuser\n</code></pre> <p>Now on your local machine run:  </p> <pre><code>ssh-keygen -t ed25519 -C \"[email\u00a0protected]\"\n</code></pre> <p>Follow the instructions, it should ask you where you want to save the file and if you want a password or not. Make sure you set a string one. To copy the public key over to your server run on your local machine:</p> <pre><code>ssh-copy-id -i ~/.ssh/id_ed25519.pub newuser@your_server_ip\n</code></pre> <p>Keep in mind newuser@your-server-ip is the username and the remote device you are trying to copy your public key into. When you get prompted for a password, it will be the password for the account on the remote device, NOT the password you just made for the SSH key. Once verified, it will copy over the public key, and you can now log in Via SSH. To turn off username and password login, type in: \u200d</p> <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre> <p>Find these values and set them as you see them here. \u200d</p> <pre><code>Port 2222     # Change default port (use a number between 1024 and 65535)\nPermitRootLogin no                 # Disable root login\nPasswordAuthentication no          # Disable password authentication\nPubkeyAuthentication yes           # Enable public key authentication\nAuthorizedKeysFile .ssh/authorized_keys # Specify authorized_keys file location\nAllowUsers newuser                 # Only allow specific users to login\n</code></pre> <p>This disallows every login method besides SSH under the user you copied your public key to. Stops login as Root and only allows the user you specify to log in. Hit CTL+S to save and CTL+x to get out of the file editor. Restart SSH: \u200d  </p> <pre><code>sudo service ssh restart\n</code></pre> <p>This might boot you out of the session. If it does, this is a good time to test the other login methods to see if they are declined before continuing. Also, it should go without saying, but you need to keep the private key safe and if you lose it you will not be able to get in remotely anymore.You can further lock down your login with: \u200d</p> <pre><code>Protocol 2                 # Use only SSH protocol version 2\nMaxAuthTries 3             # Limit authentication attempts\nClientAliveInterval 300    # Client alive interval in seconds\nClientAliveCountMax 2      # Maximum client alive count\n</code></pre> <p>Now, let's dive into users a bit more and see how we can leverage them for a bit of organization and security.</p>"},{"location":"00ServerConfig/#users","title":"Users","text":"<p>Users are important when it comes to managing a Linux server. There is an idea in server management called the \u201cPrinciple of The Least Privilege\u201d this basically means that you want to give an app or process the minimum amount of privileges that it needs to do its job. Root has unlimited power, and no app really needs this. Making a user for apps that you're running accomplishes a few things. It can limit potential damage if an application you are running is compromised. It adds isolation when running more than one app, it helps with auditing so you know what app is using what system resources.  </p> <p>In short, users are a great way of helping organize your system and helps you troubleshoot if and when things go wrong. To add a new user, run: \u200d</p> <pre><code>sudo useradd -rms /usr/sbin/nologin -c \"a comment\" youruser\n</code></pre> <p>This command makes a user and gives them a home directory for app data but does not allow login as the user. The -c flag is optional, but It's nice to know what the user is for, like \u201cRunning Nextcloud\u201d or whatever. Clone app files into the /opt directory with: \u200d</p> <pre><code>sudo mkdir /opt/myapp\n</code></pre> <p>This command makes a user and gives them a home directory for app data but does not allow login as the user. The -c flag is optional, but It's nice to know what the user is for, like \u201cRunning Nextcloud\u201d or whatever. Clone app files into the /opt directory with: \u200d</p> <pre><code>sudo chown appuser:appuser /opt/myapp\n</code></pre> <p>Ok, with this your login is locked down, and you should have a decent idea about how to use users. Next is logs. \u200d</p>"},{"location":"00ServerConfig/#logs","title":"Logs","text":"<p>Logs are crucial to system administration. They keep track of system health, help troubleshoot issues and detect threats. So you want to set up proper log rotation so they do not take up too much space on your system, plus are easier to read and manage. To set up proper log rotation, you want to edit the logrotate.conf file located in /etc. Individual application configurations are typically stored in /etc/logrotate.d/, so an example configuration for NGINX would look like: \u200d  </p> <pre><code>/var/log/nginx/*.log {\n    weekly\n    missingok\n    rotate 52\n    compress\n    delaycompress\n    notifempty\n    create 0640 www-data adm\n    sharedscripts\n    postrotate\n        [ -f /var/run/nginx.pid ] &amp;&amp; kill -USR1 `cat /var/run/nginx.pid`\n    endscript\n}\n</code></pre> <p>This configuration rotates logs weekly, keeps 52 weeks of logs, compresses old logs, makes new logs with the right permissions and then signals NGINX to reopen log files after rotation. You can test it with:  </p> <pre><code>sudo logrotate -d /etc/logrotate.conf\n</code></pre> <p>This will show what it will do without actually rotating logs. With this all set up, you can start to do more advanced stuff like triggering alerts based on log entries. Now this is good for a single server but if you manage more than one server it's a good idea to look into tools like Grafana Loki, Graylog and Fluentd. I won't go into detail here, but if you're looking to up your log game, these a decent place to start. \u200d  </p>"},{"location":"00ServerConfig/#backups","title":"Backups","text":"<p>Backups, and more importantly, testing your backups, are extremely important in server management. Remember: a backup is not a backup unless you test it. Untested backups are essentially useless.  </p> <p>There are three main types of backups. Full, Differential, Incremental. Full backups are a complete copy of all data on a disk. Takes the most resources, but is the easiest to restore from. Differential backups back up all the changes since the last full backup, it's a middle ground strategy for backups on both space and restoration speed. An incremental backup backs up data that was changed since the last backup, this is the fastest backup option but can be the most complex to restore.  </p> <p>I think of it like this. I use incremental backups for things like photos and documents or project files and folders that get edited a lot. I'll use a full backup for backing up and entire server or disk. Differential backups Ill use for backing up full folders like /etc, /opt and log folders.  </p> <p>Now what about storage? If you follow the 3-2-1 rule, you will be golden. 3 copies of your data, 2 storage types, and 1 offsite backup. I'd say if this seems like too much, the \u201coffsite\u201d storage is the most important and not one to skip. In case of a catastrophic meltdown, having a hard disk with your backups is invaluable. Offsite / offline backups can also save your ass from ransomware. So keep that in mind. There is a huge amount of backup software out there. This link is for exploring some more professional backup tools. This link has file sync, transfer and could storage solutions. I use a combo of sync-thing, Borg backup and good old-fashioned FTP.  </p> <p>Remember, that backup, logs and server monitoring is an evolving process based on your needs. The specific strategy you implement should be tailored to your needs and the criticality of your data.</p>"},{"location":"00ServerConfig/#basic-network-safety","title":"Basic Network Safety","text":"<p>The next step in securing a server is to lock down ports that need don\u2019t need to be exposed to the internet and banning things that try to log in when they should not. UFW and Fail2Ban are two tools that are in widespread use for this. They are simple and easy to use, UFW lets you set traffic rules for ports and Fail2Ban will ban and IP address when it knocks on a port they should not be or if they fail to log in after some predefined rules. UFW or uncomplicated firewall often comes preinstalled on a lot of VPS services, same with Fail2Ban, but if you are on a new machine and you're unsure, run: \u200d</p> <pre><code>sudo apt install ufw\n\nsudo apt install fail2ban\n</code></pre>"},{"location":"00ServerConfig/#ufw","title":"UFW","text":"<p>We will worry about Fail2Ban later, for now let's focus on UFW setup. First run some default policys with:  </p> <pre><code>sudo ufw default deny incoming\n\nsudo ufw allow outgoing\n</code></pre> <p>This is considered best practice, as it follows the \u201cthe least privileges\u201d idea I touched on earlier. It reduces attack surface on your machine and gives you precise control over what you do expose. In short, this configuration creates a balance between security and functionality. Your server can reach out to the internet as needed, but external entities can only connect to your server in ways you've explicitly allowed. Now let's allow some stuff in. \u200d  </p> <pre><code>sudo ufw allow ssh\nsudo ufw allow 80\nsudo ufw allow 443\n</code></pre> <p>If you are going to be running a web server, you need port 80 and port 443 open. 80 is HTTP and 443 is HTTPS. By default, port 22 is SSH, if you changed this you need to specify the port instead of using the \u201callow ssh\u201d command. Here are some other useful commands: \u200d  </p> <pre><code>#List rules with numbers:\nsudo ufw status numbered\n#Delete by number:\nsudo ufw delete NUMBER\n#Delete by rule specification:\nsudo ufw delete allow 80\n#You can allow connections from specific IP addresses:\nsudo ufw allow from 192.168.1.100\n#You can also only allow an IP to connect to a specfic port with: \nsudo ufw allow from 192.168.1.100 to any port 22\n#If you neeed to allow a range of ports: \nsudo ufw allow 6000:6007/tcp\n#To further protect from brut force attacks you can rate limit specific ports with: \nsudo ufw limit ssh\n#This would limit port 22 to 6 connections in 30 seconds from a single IP. To see the status of the firewall you can use:\n\n#Adding this goves you more info\nsudo ufw status verbose\n#and to reset incase you need to start over: \nsudo ufw reset\n#and to enable and disable: \nsudo ufw enable \nsudo ufw disable\n\n#finaly to enable logging and adjusting the log level: \nsudo ufw logging on\nsudo ufw logging medium # levels are low, medium, high, full\n</code></pre> <p>On to Fail2Ban now.  </p>"},{"location":"00ServerConfig/#fail2ban","title":"Fail2Ban","text":"<p>\u200d The main configuration is located in /etc/fail2ban/jail.conf, but it's recommended to create a local configuration file: \u200d  </p> <pre><code>sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local\n\nsudo nano /etc/fail2ban/jail.local\n</code></pre> <p>\u200d There are some basic settings in the [DEFAULT] section of the jail.local section those are: \u200d  </p> <pre><code>bantime = 10m\nfindtime = 10m\nmaxretry = 5\n</code></pre> <p>\u200d Ban time is how long an IP is banned. Find time is the time frame in witch Fail2Ban looks for repeated failure, and max retry is the number of failures before an IP is banned. You can tune these as you see fit. There are also custom jails you can set, Fail2Ban also supports jails for commonly used services like SSH. There are even more steps you can take, but I think this covers the basics.  </p>"},{"location":"00ServerConfig/#nginx","title":"NGINX","text":"<p>There are a small mess of web servers out there that you can use. Apache, Caddy, nginx, IIS to name a few. I use Nginx. It's what I know, and it works really damn well. Nginx (pronounced engine-x) is a web server, reverse proxy, and load balancer. As a web server, it excels at serving static content and can handle loads of concurrent connections with fairly low resource usage. As a reverse proxy, it can sit in front of your application servers and forward traffic to them while enchaining the apps' security. Its load balancing aspects can effectively balance traffic between servers, improving reliability and scalability.  </p> <p>When installed via apt, the default location for nginx is /etc/nginx/ the nginx.conf is mostly used for global server configuration and includes filed from the /etc/nginx/sites-enabled folder. This modular structure allows for easy management of multiple sites. Two folders to be aware of are the sites-enabled folder and the sites-available folders. You can think of the sites available as a staging place to test your site configurations, while the sites enabled is for live sites and apps. A common practice is to set up and test your configuration in the sites in the sites available, then when you're ready to go live and get an SSL cert, you link the file to the sites-enabled folder. You do that with: \u200d  </p> <pre><code>ln -s /etc/nginx/sites-available/yoursitefile /etc/nginx/sites-enabled\n</code></pre> <p>Then reload nginx and double check nginx status with: \u200d  </p> <pre><code>sudo systemctl reload nginx\n\nsudo systemctl status nginx\n</code></pre> <p>Your site should be live now.  </p> <p>Below, I\u2019ll show you some boilerplate Nginx site configurations. Be sure to look into your app or sites needs as these are just starting points.\u00a0For static sites, this is a decent starting point.\u00a0  </p> <p>Basic Static Website Configuration:  </p> <pre><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name example.com www.example.com;\n    root /var/www/example.com/html;\n    index index.html index.htm;\n    location / {\n        try_files $uri $uri/ =404;\n    }\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n\n    # Logging\n    access_log /var/log/nginx/example.com.access.log;\n    error_log /var/log/nginx/example.com.error.log warn;\n\n    # SSL configuration (uncomment after running Certbot)\n    # listen 443 ssl http2;\n    # listen [::]:443 ssl http2;\n    # ssl_protocols TLSv1.2 TLSv1.3;\n    # ssl_prefer_server_ciphers on;\n    # ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n\n    # Certbot will add its own SSL certificate paths\n    # ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    # ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n}\n</code></pre> <p>Proxy Pass Configuration:  </p> <pre><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name app.example.com;\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n\n    # Logging\n    access_log /var/log/nginx/app.example.com.access.log;\n    error_log /var/log/nginx/app.example.com.error.log warn;\n\n    # SSL configuration (uncomment after running Certbot)\n    # listen 443 ssl http2;\n    # listen [::]:443 ssl http2;\n    # ssl_protocols TLSv1.2 TLSv1.3;\n    # ssl_prefer_server_ciphers on;\n    # ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n\n    # Certbot will add its own SSL certificate paths\n    # ssl_certificate /etc/letsencrypt/live/app.example.com/fullchain.pem;\n    # ssl_certificate_key /etc/letsencrypt/live/app.example.com/privkey.pem;\n}\n</code></pre> <p>WebSocket Upgrade Configuration:  </p> <pre><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name ws.example.com;\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n\n    # WebSocket timeout settings\n    proxy_read_timeout 300s;\n    proxy_send_timeout 300s;\n    # Logging\n    access_log /var/log/nginx/ws.example.com.access.log;\n    error_log /var/log/nginx/ws.example.com.error.log warn;\n\n    # SSL configuration (uncomment after running Certbot)\n    # listen 443 ssl http2;\n    # listen [::]:443 ssl http2;\n    # ssl_protocols TLSv1.2 TLSv1.3;\n    # ssl_prefer_server_ciphers on;\n    # ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n\n    # Certbot will add its own SSL certificate paths\n    # ssl_certificate /etc/letsencrypt/live/ws.example.com/fullchain.pem;\n    # ssl_certificate_key /etc/letsencrypt/live/ws.example.com/privkey.pem;\n}\n</code></pre> <p>The basic configuration is for serving a simple static site. It specifies the domain name, listens on port 80 for both IPv4 and IPv6, sets the root directory for the site, configures error handling with try_files, adds some basic headers that protect from common web vulnerabilities, sets up logging for access and errors and includes a section for SSL that is commented out. Most of the SSL config will be handled by certbot, but there are a few lines in there that add some SSL security that can be uncommented after certbot is ran. \u200d The proxy pass configuration is similar to the basic configuration, but instead of serving files directly, it proxies requests to a local application (in this case, running on port 3000).  </p> <p>The third configuration file is geared towards apps that need website connections, it's a lot like the proxy pass configuration with some changes to allow web sockets. \u00a0  </p> <p>Ok, any bit about web servers is not really complete without talking about SSL. For casual use, certbot is a pleb's best friend. It's free, it is fast, and it fucking works. I use the python version of certbot. You can install that with: \u00a0 \u200d  </p> <pre><code>sudo apt install certbot python3-certbot-nginx\n</code></pre> <p>Once it's installed you can simply run \u201ccertbot\u201d in your terminal, this will detect the configs in your sites-enabled folder and ask what you want to do (renew, reissue, etc\u2026). Follow the walk-through, certbot gives you It's pretty straight forward. \u200d So nowadays certbot when getting a new cert will set up auto-renew for you, so it's a sit-and-forget kinda task. But to make sure it worked you can run:  </p> <pre><code>sudo systemctl status certbot.timer\n</code></pre> <p>if this is up and running, you should be good to go if you're using systemd. \u200d  </p>"},{"location":"00ServerConfig/#quality-of-life-tools","title":"Quality Of Life Tools","text":"<p>On the topic of tools that make managing your system easier, I'm going to present some tools I use on my servers that I think make management just a bit nicer. Not going to do a deep dive on any tool. All of these are optional and in no particular order. A lot of these I found on the site terminal trove, a great site to browse if you're a terminal junkie like me.\u00a0  </p> <p>First tool, Btop this is in my personal must haves list. Btop is a terminal monitor of resources. It shows you real time visuals of usage stats for your box\u2019s CPU, RAM, disks, network and running possesses it's written in C++ and can be installed via most package managers.\u00a0  </p> <p>For servers that have a lot of outside connections, i.e. a nostr relay, a tool like Neoss is helpful. Neoss aims to replace usual ss command for basic usage. It provides a list of in use TCP and UDP sockets with their respective stats. Its main advantage over SS raw output is its clear and simple TUI (terminal user interface) that allows you to sort, refresh and navigate what is connected to your machine. It's installed Via NPM, meaning you need JavaScript installed.  </p> <p>GoAccess is a terminal based log analyzer for web servers. It's great for a quick real time look at logs while in the terminal, but it can also generate real time HTML, JSON, and CSV reports. GoAccess can be installed via most package managers, works on all platforms.\u00a0  </p> <p>Next on the list is MC or \u201cmidnight commander\u201d Its a powerful text based file manager with a two panel display and lots of features for manipulating files and directories. It's also cross-platform and can be installed via most package managers.\u00a0  </p> <p>In the same thread of server file management is NCDU. This one is in my must-have list. It is a disk usage analyzer that is designed to find space hogs. It's fast and very simple to use. It can be installed on most systems and package managers. Windows will need Linux subsystems installed to use it.\u00a0  </p> <p>Hopefully you find some use out of these. The last topic I'd like to touch on is DNS it's a bit topic, so I'm not going to do a massive deep dive, but if you're self-hosting it helps to have some of the basics of DNS down.\u00a0ing doesn\u2019t work.  </p>"},{"location":"00ServerConfig/#dns","title":"DNS","text":"<p>DNS or The Domain Name System is a core part of how the internet as we know it works. Love it or hate it, it's what we have to work with If you want to be accessible to the wider internet. (I dislike what it currently is it, but I\u2019m not opening that can of worms here.) Basically, Think of DNS like a phone book. It\u2019s what allows you to type duckduckgo.com instead of \u201c52.250.42.157\u201d every time you need to search the internet. It translates something easy for humans to remember into the information needed by computers to actually reach \u201cduckduckgo.com\u201d  </p> <p>If you're hosting on a VPS, the only thing you really need to know is to know how to point an A record at your server's IP after you decide on a domain to use. Pretty much all VPS hosts can give you a static IP, so that's mostly a set and forget type deal.  </p> <p>Hosting from home presents some challenges. One prominent one is (and a valid question that I often hear) not having a static IP address. Nowadays with the number of devices online needing IP addresses we do a lot of juggling, and most IP addresses are assigned dynamically unless you pay for it from your ISP.\u00a0 But there is a solution. The answer to this is called Dynamic DNS or DDNS. This allows automatic updating of DNS servers every time an IP address changes. There are a mess of ways to set up dynamic DNS. You can host your own service or use a host. Here is a link with some hosts and projects to check out.  </p> <p>In a nutshell, it works like so. You chose a provider or set up your own. You get a domain, install the client on your home router or server and the client periodically checks to see if the IP address has changed, if so it updates your DNS record for that domain.\u00a0  </p>"},{"location":"00ServerConfig/#docker","title":"Docker","text":"<p>I'm not gonna cover how to install docker here. It's best to follow the official installation guide anyway. But I want to touch on a few things. First off, docker is useful as hell for testing new apps. But that's about as far as I take it. I personally do not like using docker all that much, and where possible run applications directly. Here are some pros and cons to keep in mind.  </p>"},{"location":"00ServerConfig/#docker-pros","title":"Docker Pros","text":"<p>Consistency is a big one it can make things more constant between development, testing, and deploying if your system can run docker you can run most docker apps. It can help with isolation, reducing conflicts between apps. In some cases it can help with efficiency as it takes less resources than traditional VM\u2019s. It can help with scaling as it's pretty easy to spin up more containers and the microservice architecture can be useful because you can break down an application into smaller manageable services, allowing for independent scaling of said services. Lastly the community is large, so the documentation is good, and community support is always helpful, plus there is a wide range of ready to go docker images for deployment.  </p>"},{"location":"00ServerConfig/#docker-cons","title":"Docker Cons","text":"<p>I\u2019ll start with overhead. While it's better than a traditional VM, it uses more resources than running something directly on the host, and I/O operations can be slower. The fact that docker shares the system's kernel means that a compromised app could affect the system. Persistent data is doable but adds a layer of complexity that can cause data loss with new users, it also makes backups more complex. Networking can also be more complex with docker, making it not as straightforward. It's also good to note that if you use UFW or firewalld for a firewall, docker bypasses those rules. Docker is only compatible with iptables. Also, while a well managed docker container can help manage server resources, an improperly manged on can be detrimental to resources as well. Containers can get too large, effecting disk size, and misconfiguration can use too many of your servers resources. It also adds extra layers of complexity when monitoring and debugging applications, especially across multiple containers.  </p> <p>At the end of the day, it's your system. But I wanted to lay out some pros and cons when it comes to using Docker. Moving on.\u00a0  </p>"},{"location":"00ServerConfig/#wrap-up","title":"Wrap Up","text":"<p>Well, that about does it for the basics of server setup and tools. There is a a script that I wrote that will do most of this for you. I wrote it to make my own server setup faster. You can get that here, it includes all of my must-haves and does some basic configuration. Tweak it to your own needs, and as always stay safe out there.</p>"},{"location":"01HTML/","title":"HTML","text":""},{"location":"01HTML/#general-information","title":"General information","text":"<p>HTML Semantic Elements</p> <p>How to Section Your HTML - CSS-Tricks - practical guide to <code>semantic HTML</code></p> <p>A short guide to help you pick the correct HTML tag</p> <p>Conquering Responsive Layouts</p> <p>Start creating responsive layouts with confidence! Jump in on this 21-day FREE challenge, put the time in, and you will walk out understanding how you can make a responsive layouts.</p> <p>10 Helpful Native Web APIs Every New JavaScript Developer Should Know</p> <p>Those HTML Attributes You Never Use \u2014 Smashing Magazine</p>"},{"location":"01HTML/#accessibility","title":"Accessibility","text":"<p>Accessibility 101</p>"},{"location":"02CSS/","title":"CSS","text":"<p>Learn CSS Grid with Wes Bos in 25 pretty good videos</p> <p>Smart CSS Solutions For Common UI Challenges \u2014 Smashing Magazine</p> <p>Writing CSS has probably never been more fun and exciting than it is today. In this post we\u2019ll take a look at common problems and use cases we all have to face in our work and how to solve them with modern CSS. If you\u2019re interested, we\u2019ve also just recently covered CSS auditing tools, CSS generators, front-end boilerplates and VS code extensions \u2014 you might find them useful, too.</p> <p>The Complete Guide to the Dark Mode Toggle</p> <p>This complete guide to the dark mode toggle includes best practices for implementing a color mode switcher on your website using custom variables, prefers-color-scheme, and more, all with a very pretty demo!</p> <p>Extensive CSS guide</p> <p>What do I need to read to be a great at CSS?</p> <p>Designing shadows in CSS</p> <p>CSS hide scrollbars</p> <p>The Complete Guide to Centering in CSS | Modern CSS Solutions</p> <p>Responsive header in Tailwind CSS</p> <p>A Complete Guide to Flexbox by CSS-tricks</p> <p>flex-box manual</p> <p>How to select correct font size</p> <p>Everything about the gaps</p> <p>CSS conditional border radius</p> <p>CSS Units Guide, everything you need to know</p> <p>Native CSS nesting: What you need to know</p> <p>CSS pseudoelements and pseudoclasses</p> <p>Get Comfortable With CSS Selectors</p> <p>Scrollable div layout with height 100%</p> <p>CSS tips on Images you need to know</p>"},{"location":"02CSS/#css-tools","title":"CSS Tools","text":"<p>Useful CSS tools and resources to boost your productivity</p> <p>Utopia - fluid responsive design</p> <p>Minimal snippets for modern CSS layouts and components</p>"},{"location":"02CSS/#frameworks","title":"Frameworks","text":"<p>Minimal CSS Framework for semantic HTML</p>"},{"location":"03JavaScript/","title":"JavaScript/ES6","text":""},{"location":"03JavaScript/#usefull-tools","title":"Usefull tools","text":"<p>JavaScript Booster - VSCode extension</p> <p>This VS Code extension provides various code actions (quick fixes) when editing code in JavaScript (or TypeScript/Flow). Just note the light bulb at the left and press it to learn how you can transform the code under the cursor.</p>"},{"location":"03JavaScript/#vanilla-javascript","title":"Vanilla JavaScript","text":"<p>Eloquent JavaScript 3rd edition (2018)</p> <p>Jasmine Documentation</p> <p>Jasmine is a behavior-driven development framework for testing JavaScript code. It does not depend on any other JavaScript frameworks. It does not require a DOM. And it has a clean, obvious syntax so that you can easily write tests. </p> <p>JavaScript 30 \u2014 Build 30 things with vanilla JS in 30 days with 30 tutorials</p> <p>JavaScript Modules \u2013 A Beginner's Guide</p> <p>JavaScript Fetch API</p> <p>ES6 Handbook: Everything You Need to Know</p> <p>What is localStorage? - DEV Community</p> <p>JavaScript modules</p> <p>8 JavaScript Tips &amp; Tricks That No One Teaches  + Giveaway - DEV Community</p> <p>8 Useful JavaScript ES2019 Features to Know About - DEV Community</p> <p>Algorithms and data structures implemented in JavaScript with explanations and links to further readings</p> <p>JavaScript map function: Everything you need to know&gt;</p> <p>How to get the most out of the JavaScript console</p> <p>A deep dive into Javascript Object properties - DEV Community</p> <p>Here is a list of javascript operator and how to use it!</p> <p>Slice and Splice JavaScript Arrays Like a Pro</p> <p>JavaScript Reduce Method Made Simple</p> <p>How can you check if something is an array?</p>"},{"location":"03JavaScript/#typescript","title":"TypeScript","text":"<p>TypeScript in a Weekend: A Crash Course</p> <p>TypeScript Documentation</p>"},{"location":"03JavaScript/#react","title":"React","text":"<p>The Beginner's Guide to React</p>"},{"location":"Courses/","title":"Courses","text":"<p>Online Learning: A Bachelor's Level Computer Science Program Curriculum (Updated - Dec 2020)</p> <p>Teach Yourself Computer Science</p> <p>If you\u2019re a self-taught engineer or bootcamp grad, you owe it to yourself to learn computer science. Thankfully, you can give yourself a world-class CS education without investing years and a small fortune in a degree program.</p> <p>There are plenty of resources out there, but some are better than others. You don\u2019t need yet another \u201c200+ Free Online Courses\u201d listicle. You need answers to these questions:</p> <ul> <li>Which subjects should you learn, and why?</li> <li>What is the best book or video lecture series for each subject?</li> </ul> <p>This guide is our attempt to definitively answer these questions.</p> <p>CMU CS Academy</p> <p>CMU CS Academy is an online, graphics-based computer science curriculum taught in Python provided by Carnegie Mellon University. We create novel, world-class Computer Science education for your classroom \u2014and it\u2019s entirely free.</p> <p>Learn PWA</p> <p>This course covers the fundamentals of Progressive Web App development into easy-to-understand pieces. Over the following modules, you'll learn what a Progressive Web App is, how to create one or upgrade your existing web content, and how to add all the pieces for an offline, installable app. Use the menu pane by the \"Learn PWA\" logo to navigate the modules.</p> <p>Web-Dev-For-Beginners: 24 Lessons, 12 Weeks, Get Started as a Web Developer</p> <p>24 Lessons, 12 Weeks, Get Started as a Web Developer </p> <p>Full stack open 2021</p> <p>This course serves as an introduction to modern web application development with JavaScript. The main focus is on building single page applications with ReactJS that use REST APIs built with Node.js. The course also contains a section on GraphQL, a modern alternative to REST APIs.</p> <p>The course covers testing, configuration and environment management, and the use of MongoDB for storing the application\u2019s data.</p> <p>ReallyConfused</p> <p>Explore roadmaps on how to break into tech careers using self-study. Understand what courses to take, books to read, projects to build, how to network, and how much money you need to spend to get a job in tech. Then build your own roadmap and crush those long-term goals!</p> <p>FreeCodeCamp </p> <p>Learn to Code \u2014 For Free \u2014 Coding Courses for Busy People. Learn FullStack at your own pace.</p> <p>The Odin Project</p> <p>Your Career in Web Development Starts Here: learn Foundations, Ruby on Rails FullStack or JavaScript FullStack. Community supported free learning paths.</p> <p>Project Euler</p> <p>Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Although mathematics will help you arrive at elegant and efficient methods, the use of a computer and programming skills will be required to solve most problems.</p> <p>JetBrains Academy: Frontend Dev track (free)</p> <p>Do you want to create your own websites or web applications? Choose this track to learn the most popular development tool suite among programmers around the world. We will cover the basics of JavaScript, HTML, and CSS to discover the power of modern Frontend development.</p> <p>Codeamigo - free courses, ispired by rejection from Codecademy.</p> <p>Webapps for Beginners</p> <p>Ruby Monday Study Group curriculum for intermediates</p> <p>This book has been written after we have run 4 beginners groups at our Ruby Monstas groups in Berlin, which then turn into intermediate groups. It outlines the current state of our intermediate group curriculum.</p> <p>After completing this curriculum you\u2019ll have a basic understanding how browsers talk to web applications, and how web applications respond. You\u2019ll be able to generate dynamic web pages, and build simple web applications.</p> <p>FOSS Academy</p> <p>15 free Python courses for beginners</p>"},{"location":"DNS_Records/","title":"DNS Management","text":"<p>DNS propagation is the time it takes for changes made to a domain\u2019s DNS records to take effect across the internet. When you make a change to a domain\u2019s DNS settings, it can take some time for that change to be reflected everywhere on the internet. This is because DNS records are cached on different servers all over the world, and it takes time for those servers to update their records.</p> <p>Why Should I Care About DNS Propagation?</p> <p>You might not need to worry about DNS propagation if you\u2019re just a casual internet user. But if you\u2019re responsible for managing a website or domain, then it\u2019s important to understand how DNS propagation works, because it can affect how quickly your changes take effect.</p> <p>For example, if you\u2019re transferring a domain to a new web hosting provider, it\u2019s important to be aware of how long the DNS propagation will take, so that you can plan accordingly. If you\u2019re not aware of DNS propagation, you might assume that the changes you\u2019ve made to your domain\u2019s DNS settings will have taken effect immediately, when in reality it could take several hours \u2013 or even longer \u2013 for the changes to be fully propagated across the internet. This can lead to confusion, and potentially cause problems for your website or domain. How To Propagate Changes Faster Method 1: Reduce time-to-live (TTL) Value </p> <p>The best way to speed up DNS propagation is to reduce the time-to-live (TTL) value for your DNS records. This tells DNS resolvers how long to cache your DNS records, so reducing the TTL value will ensure that DNS resolvers refresh your records more often, which can speed up the propagation process. </p> <p>However, this comes with a few downsides:</p> <p>If the DNS records for your website expire quickly, it can cause your site to appear slow to visitors, because their browsers will have to fetch new records more frequently, which takes time. This can be frustrating for users, and make them less likely to continue using your site.  It can lead to an increase in the number of requests sent to your DNS authoritative resolver. If you maintain your own servers, this can put additional strain on your system, potentially increasing hosting costs and server charges. </p> <p>If you plan ahead of time, you can avoid this by temporarily reducing the TTL values of your DNS record one day before you plan to make changes. This will ensure that all the records will expire quickly when you want them to.</p> <p>For example, if your DNS records have the TTL value of 1 day, then you can change it to 5 minutes the day before. On the next day, you can change the DNS records to point to new servers. This will ensure that all the new visitors will be sent to your new server within 5 minutes of making the changes. Once you are satisfied that everything works as expected, you can increase the TTL value back to 1 day.</p> <p>Method 2: Request DNS Resolvers To Flush Cache</p> <p>If you didn\u2019t plan ahead of time, and you need to update your DNS records immediately, then you can request DNS resolvers to flush cache values of your records, and update them with new existing values. Here are the links for some of the major DNS providers:</p> <p>Cloudflare</p> <p>Google</p> <p>OpenDNS</p> <p>Although flushing the cache from these servers will update the records for the vast majority of users on the internet, many technology enthusiasts and enterprise clients who have the time and resources to maintain their own DNS servers will still have a stale copy of your DNS records until it expires.  Check If DNS Records Were Updated Successfully Method 1: Use A DNS Propagation Checker </p> <p>You can use a DNS propagation checker to monitor the progress of your DNS changes. These tools can help you track when your changes have been picked up by different DNS resolvers around the world, so you can see how quickly the propagation process is progressing. </p> <p>Site24x7\u2019s DNS Propagation Checker which checks the DNS records of a given address against multiple nameservers from different parts of the world</p>"},{"location":"Datascience/","title":"Data science","text":"<p>Python for Data Analysis, 3E</p> <p>dataframe_image</p> <p>A package to convert Jupyter Notebooks to PDF and/or Markdown embedding pandas DataFrames as images.</p> <p>Practical Deep Learning for Coders 2022 \u00b7 fast.ai</p> <p>The Data School Web Book Library</p>"},{"location":"Datascience/#cheat-sheets-for-datascience","title":"Cheat sheets for DataScience","text":"<p>Pandas</p> <p>NumPy</p> <p>Machine learning</p> <p>PowerBI</p> <p>SQL Basics</p>"},{"location":"Docker/","title":"Docker","text":"<p>A tool for exploring each layer in a docker image</p> <p>Using Docker in development the right way - DEV Community</p> <p>Ruby on Docker</p> <p>Portainer: Container Management Software for Kubernetes and Docker</p> <p>The Ultimate Docker Cheat Sheet</p>"},{"location":"Git/","title":"git","text":"<p>Some lifesaving git commands and what's happening under the hud when executed</p> <p>How I teach Git - extensive git guide</p> <p>Git In Two Minutes (for a solo developer) - Gary Robinson's Rants</p> <p>Oh Shit, Git!?!</p> <p>Git is hard: screwing up is easy, and figuring out how to fix your mistakes is fucking impossible. Git documentation has this chicken and egg problem where you can't search for how to get yourself out of a mess, unless you already know the name of the thing you need to know about in order to fix your problem.</p> <p>Git Explorer: Git Command Explorer. Find the right commands you need without digging through the web.</p> <p>Basic git commands</p> <p>git flight rules - extensive git curriculum</p> <p>reserved location of git flight rules</p> <p>A (Very) Simple Git Workflow</p> <p>GitSheet - my git cheatsheet - DEV</p> <p>git command ecplained with cats - easy git guide for beginners</p> <p>Advantages of Git-flow over standard git commands - DEV</p> <p>git - the simple guide - no deep shit</p> <p>How to make a good <code>git commit</code> </p> <p>Rewriting git history (amend/rebase)</p> <p>Git rebase tutorial. Rebase vs Merge - video</p> <p>How to undo a push or merge in Git branch | Level Up Coding</p> <p>Git Clone Branch \u2013 How to Clone a Specific Branch</p>"},{"location":"Practice/","title":"Tasks/Practice","text":"<p>Exercism</p> <p>Develop fluency in 55 programming languages with our unique blend of learning, practice and mentoring. Exercism is fun, effective and 100% free, forever.</p> <p>7 Graphical User Interfaces</p> <p>7GUIs is a programming benchmark to compare implementations in terms of their notation. 7GUIs defines 7 tasks that represent typical challenges in GUI programming. This site implements the 7 tasks using vanilla HTML, CSS &amp; JavaScript. Click a link below to see a description of a task, the rendered GUI &amp; links to its code.</p> <p>Frontend Mentor | Front-end coding challenges using a real-life workflow</p> <p>Solve real-world HTML, CSS and JavaScript challenges whilst working to professional designs. Join 234,822 developers building projects, reviewing code, and helping each other get better.</p> <p>Learn CSS by playing games</p> <p>Learn Linux commands by playing a simple text adventure</p>"},{"location":"Python/","title":"Python","text":"<p>To Ruby From Python</p> <p>Python is another very nice general purpose programming language. Going from Python to Ruby, you\u2019ll find that there\u2019s a little bit more syntax to learn than with Python.</p> <p>The Hitchhiker's Guide to Python</p> <p>Django Admin Cookbook</p> <p>Six things to do every time I start a Django project</p> <p>Setting up the Python environment</p> <p>How To Use a .env File With Python</p> <p>Python Best Practices for a New Project in 2021</p> <p>Date and time localization methods in Python</p> <p>GitHub - trekhleb/learn-python: Playground and cheatsheet for learning Python. Collection of Python scripts that are split by topics and contain code examples with explanations.</p> <p>Learn Python from scratch Free OpenSource interactive online course.</p> <p>Do Python One-Liners Make Your Code Faster? - YES They Do!</p> <p>Implementing RSA in Python from Scratch (Part 1)</p> <p>Learn Python ASTs, by building your own linter</p> <p>Python args and kwargs: Demystified</p> <p>Python programs, usually short, of considerable difficulty, to perfect particular skills.</p> <p>\"An \u00e9tude (a French word meaning study) is an instrumental musical composition, usually short, of considerable difficulty, and designed to provide practice material for perfecting a particular musical skill.\" \u2014 Wikipedia</p> <p>This project contains pytudes\u2014Python programs, usually short, for perfecting particular programming skills.</p>"},{"location":"Python/#cheatsheets","title":"CheatSheets","text":"<p>Python code examples</p> <p>Comprehensive Python Cheatsheet</p> <p>Python For Data Science - A Cheat Sheet For Beginners</p> <p>Pandas Cheat Sheet for Data Science in Python</p> <p>NumPy Cheat Sheet: Data Analysis in Python</p> <p>Matplotlib Cheat Sheet: Plotting in Python</p>"},{"location":"ReusableElements/","title":"Reusable Elements","text":"<p>25+ Creative CSS Divider Examples With Tutorials (Code Snippets) &amp; Previews 2021</p>"},{"location":"ReusableElements/#css-templatesboilerplate","title":"CSS templates/boilerplate","text":"<p>FlowBite </p> <p>Open-source collection of UI elements based on the utility-first CSS framework Tailwind designed and coded by Themesberg available in Figma and as web components.</p>"},{"location":"RubyRails/","title":"Ruby / Ruby on Rails","text":"<p>RAILSG \u00b7 Ruby on Rails Generator Reference and Command Builder</p> <p>To Ruby From Python</p> <p>Python is another very nice general purpose programming language. Going from Python to Ruby, you\u2019ll find that there\u2019s a little bit more syntax to learn than with Python.</p> <p>rbenv cheatsheet</p> <p>rbenv lets you manage installations of multiple Ruby versions.</p> <p>Logging in Rails</p> <p>FREE resources to help you get started in just under 6 hours...</p> <p>I Love Ruby: Get started with the greatest programming language made for humans.</p> <p>10 things to add to every Rails app </p> <ol> <li>Tailwind CSS;</li> <li>Authentication (Devise);</li> <li>Email systems:<ul> <li>Letter opener</li> <li>Postmark</li> </ul> </li> <li>Admin systems - administrate;</li> <li>Tests;</li> <li>Rubocop;</li> <li>Sentry;</li> <li>Sidekiq;</li> <li>Metamagic;</li> <li>Rack attack.</li> </ol> <p>A Brief Overview of Rails Generators </p> <p>How to debug interactions between your code and the Rails framework (and other gems)</p> <p>Rails Wizards</p> <p>Rename an ActiveRecord model</p>"},{"location":"RubyRails/#rubyrails-courses","title":"Ruby/Rails courses","text":"<p>Learn Hotwire by Building a Forum</p> <p>Learn Hotwire and Turbo with a free Rails 7 tutorial</p> <p>Turbo Rails and Turbo Streams Tutorial Learn how to leverage the power of the turbo-rails library now included by default in Rails 7 to write reactive single-page applications without having to write a single line of custom JavaScript.</p> <p>Can You Build a Web Application in Ruby Without Rails?</p> <p>This is the third article in the series on building awesome web applications with Rails. It shows how to build a simple web app in Ruby from scratch, without using Rails.</p>"},{"location":"TailwindCSS/","title":"Tailwind CSS","text":"<p>Main Tailwind CSS page</p>"},{"location":"TailwindCSS/#resources","title":"Resources","text":"<p>Tailwind Toolbox</p> <p>Free Tailwind CSS Templates, Components and Resources</p> <p>Tailwind Templates</p> <p>Free and Premium Tailwind CSS templates specially crafted for - Startup, App, SaaS, Landing Page, and Business websites. Create and launch your web projects with ready-to-use and hand-crafted Tailwind Templates.</p> <p>Flowbite - tailwind components and blocks</p> <p>Start developing with an open-source library of over 450+ UI components, sections, and pages built with the utility classes from Tailwind CSS and designed in Figma.</p> <p>Tailwind components library - free &amp; open source</p> <p>500+ UI components Super simple, 1 minute installation Free hosting MIT license - free for personal &amp; commercial use</p> <p>Tailwind CSS Components</p> <p>A free repository for community components using Tailwind CSS</p> <p>Kometa UI Kit</p> <p>Over 130 sections, built with TailwindCSS, for your awesome projects.</p> <p>All the sections are fully responsive and available in HTML, VueJS, and React. You can use them on unlimited personal and commercial projects.</p> <p>Tailwind Tools</p> <p>A collection of tools designed for developers, to save you and your team time when building websites with Tailwind CSS.</p>"},{"location":"Tools/","title":"Tools and Utilities","text":"<p>Generate random user profile pictures and names</p> <p>Generate random user profile pictures and names to use them as placeholders for your prototypes and design projects</p> <p>#HEXWORDS</p> <p>Why bother with a random green when you can choose to be a #BADA55!</p> <p>HTML to MarkDown Converter (and more)</p> <p>Best Online Tools | 10015 Tools</p> <p>Build anything online with \u201call-in-one toolbox\u201d. All tools are easy-to-use, blazing fast &amp; free.</p> <p>Interactive CSS Grid Generator | Layoutit Grid</p> <p>Carbon | Create and share beautiful images of your source code</p> <p>7 Awesome Ways to Screenshot Your Code</p>"},{"location":"UsefullScripts/","title":"bash/shell","text":"<p>bashcrawl</p> <p>Learn Linux commands by playing a simple text adventure.</p> <p>Effective Shell</p> <p>This book is for anyone who is interested in computing, and wants to learn more about the exciting, but sometimes daunting world of The Shell. The shell is simple interface for working with computers and programs and learning some of its features can enormously increase your productivity as any computer user - whether a home user or hobbyist, programmer, data scientist, writer, administrator or other professional.</p> <p>For the newcomer, you'll learn what a shell is, how to use it on your system, and then how to become more effective everyday by integrating the shell into your work. For the experienced professional, there is a wealth of detailed tips and tricks in each chapter that go into advanced topics and techniques to make you even more of a power user.</p>"},{"location":"UsefullScripts/#scripts-commands","title":"Scripts &amp; Commands","text":"<p>Writing a <code>bash</code> scripts like a pro</p> <p>Resize multiple graphic files from the command line:</p> <pre><code>sudo apt-get install imagemagick\nmogrify -resize 640 *.jpg\n</code></pre> <p>Convert large jpg/png files into webp:</p> <pre><code>sudo apt-get install webp\ncd /mywebapp/static/img/\nmkdir webp        for file in *.{jpg,png,jpeg}; do cwebp -q 60 ${file} -o webp/${file}.webp; done;\n</code></pre> <p>Linux commands for optimizing web images</p>"},{"location":"UsefullScripts/#linux-commands-for-advanced-hardware-info","title":"Linux commands for advanced hardware info","text":"<p>source</p> <p>Sometimes you need info about hardware, and you probably lost your invoice, spec list or a password to a store website. Maybe you did an upgrade and this info isn't accurate anymore. It's an easy case for home users, but what to do is you have many machines in a corporate environment? The commands below will also be useful for hardware debug.</p>"},{"location":"UsefullScripts/#uname-linux-kernel-info","title":"<code>Uname</code> - Linux kernel info","text":"<p><code>uname -a</code> - kernel version <code>uname -m</code> - system architecture</p>"},{"location":"UsefullScripts/#lspci-list-of-all-attached-devices-to-pci-bus","title":"<code>lspci</code> - list of all attached devices to PCI bus","text":"<p><code>lspci -vvv</code> - enable verbose mode.</p> <pre><code># lspci\n00:00.0 Host bridge: Intel Corporation 5500 I/O Hub to ESI Port (rev 13)\n00:01.0 PCI bridge: Intel Corporation 5520/5500/X58 I/O Hub PCI Express Root Port 1 (rev 13)\n00:09.0 PCI bridge: Intel Corporation 7500/5520/5500/X58 I/O Hub PCI Express Root Port 9 (rev 13)\n</code></pre>"},{"location":"UsefullScripts/#lshw-complete-all-in-one-list-of-installed-hardware-components","title":"<code>lshw</code> - complete <code>all in one</code> list of installed hardware components","text":"<p><code>lshw</code> works without <code>sudo</code>, but provides much less info. Includes memory configuration, firmware revisions, CPU info and core frequencies. <code>--sanitize</code> flag is super useful when you want to upload result to the internet, it will hide IP addresses and serial numbers, <code>--short</code>flag is good for compact output. Report in HTML is very helpful for easy sharing: <code>$ sudo lshw \u2013html &gt; report.html</code></p>"},{"location":"UsefullScripts/#hwinfo-another-tool-very-similar-to-lshw","title":"<code>hwinfo</code> - another tool, very similar to <code>lshw</code>","text":"<p>Hwinfo, created by SUSE developers, is another general purpose hardware probing utility capable off reporting detailed and brief information about multiple different hardware components. Examples:</p> <pre><code>$ hwinfo\n$ hwinfo \u2013short\n</code></pre>"},{"location":"UsefullScripts/#dmidecode-extract-info-from-biosuefi-using-smbios-api","title":"<code>dmidecode</code> -extract info from BIOS/UEFI using SMBIOS API.","text":"<p><code>--type</code> option for device-related info like <code>bios,system,chassis</code></p> <p>Examples:</p> <pre><code>$ sudo dmidecode -t processor\n$ sudo dmidecode -t memory\n</code></pre>"},{"location":"UsefullScripts/#lsusb-perfect-command-to-show-all-pluggable-devices","title":"<code>lsusb</code> - perfect command to show all pluggable devices","text":"<p>Useful flags: <code>-vvv</code> for verbose mode, <code>-s [bus]:[devnum]</code> will show only specific device on you need to watch. You can easily sort by vendor with <code>-d [vendor]:[product]</code>, view all in three modes with <code>-t</code> and use device-file config with <code>-S /dev/X</code> option.</p> <pre><code>$ lsusb\nBus 005 Device 002: ID 045e:00cb Microsoft Corp. Basic Optical Mouse v2.0\nBus 005 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub\n</code></pre>"},{"location":"UsefullScripts/#lscpu-first-command-to-get-cpu-info","title":"<code>lscpu</code> - first command to get CPU info","text":"<p>Verbose mode can be enabled with <code>-e</code> flag, <code>-p</code> also very useful for better formatting. <code>--online</code> and <code>--offline</code> can be specified for better visualization.</p>"},{"location":"UsefullScripts/#lsscsi-print-attacked-scsi-devices-into","title":"<code>lsscsi</code> - print attacked SCSI devices into","text":"<p>\"Old bud gold\" SCSI drives used mostly in enterprise, more costly than PCI &amp; SATA devices. Verbose mode can be enabled with <code>-L</code>, <code>-l</code> and <code>-v</code> options.</p> <pre><code>$ lsscsi\n[3:0:0:0] disk ATA ST3500418AS CC38 /dev/sda\n[4:0:0:0] cd/dvd SONY DVD RW DRU-190A 1.63 /dev/sr0\n</code></pre>"},{"location":"UsefullScripts/#dmesg-kernel-logs","title":"<code>dmesg</code> - kernel logs","text":"<p>Kernel logs are very helpful for hardware events like attach, detach, shutdown etc. Works much better with <code>grep</code> and <code>less</code> commands: <code>sudo dmesg | grep -i audio | less</code>.</p>"},{"location":"UsefullScripts/#inxi-all-in-one-script","title":"<code>inxi</code> - \"all in one\" script","text":"<p>The crazy, bigger than 10k lines of code, bash script, capable to fetch multiple system APIs and provide gigantic pile of info. Useful flags: <code>-z</code> to hide sensitive info if you wanna upload reports to internet, <code>-F</code> for verbose mode, <code>-A</code> for audio information, <code>-m</code> - memory, - <code>-i</code> - networking, <code>-p</code> - disk info, all options you can check in help menu which can be invoked by <code>-H</code>.</p>"},{"location":"UsefullScripts/#fdisk-gdisk-and-parted-all-about-your-drive-partitions","title":"<code>fdisk</code>, <code>gdisk</code> and <code>parted</code> - all about your drive partitions","text":"<p>Why are there three commands here, you want to ask? Well, they are doing very similar jobs and completely independent projects. <code>gdisk</code> was a <code>fdisk</code> fork with GTP partitioning mode support; now <code>fdisk</code> supports <code>GPT</code> too. Covering their options will take several posts like this, but here's how to check your drive info: <code>$ fdisk -l</code> or <code>gdisk -l</code> or <code>parted -l</code>.</p>"},{"location":"UsefullScripts/#blkid-and-lsblk-block-devices-list","title":"<code>blkid</code> and <code>lsblk</code> - block devices list","text":"<p>These commands shows info about available block devices. Examples below:</p> <pre><code>$ lsblk -a\nNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS\nsda 8:0 0 232.9G 0 disk\n\u251c\u2500sda1 8:1 0 200M 0 part\n\n\n# blkid -i /dev/sda\n/dev/sda: MINIMUM_IO_SIZE=\"512\" PHYSICAL_SECTOR_SIZE=\"512\" LOGICAL_SECTOR_SIZE=\"512\"\n</code></pre>"},{"location":"UsefullScripts/#mount-mount-a-drive-and-print-info-about-already-mounted","title":"<code>mount</code> - mount a drive and print info about already mounted","text":"<p><code>$ mount | column -t</code> for better visualization, <code>sudo mount /dev/sdaN /media/data</code> - mount a partition.</p> <pre><code>$ mount | column -t\n/dev/sda2   on  /                                type  ext4        (rw,relatime,stripe=256)\ndevtmpfs    on  /dev                             type  devtmpfs    (rw,nosuid,noexec,relatime,size=5827492k,nr_inodes=1456873,mode=755,inode64)\n</code></pre>"},{"location":"UsefullScripts/#df-check-used-and-free-disk-space","title":"<code>df</code> - check used and free disk space","text":"<p>Useful flag: <code>df -H</code> - human-readable output.</p>"},{"location":"UsefullScripts/#proc-virtual-file-system-full-of-hardwaresoftware-related-info-and-configuration","title":"<code>/proc</code> - virtual file system full of hardware/software related info and configuration","text":"<p><code>/prop/cpuinfo</code> - CPU specs <code>/proc/version</code> - kernel version <code>/proc/partitions</code> - partitions info</p>"},{"location":"UsefullScripts/#hdparm-getset-sataide-device-parameters","title":"<code>hdparm</code> - get/set SATA/IDE device parameters","text":"<p>Available by default in most of Linux distribution for many years, very useful for advanced configuration.</p> <p><code>$ hdparm -g</code> - display drive geometry</p> <p><code>$ hdparm -tT /dev/sdN</code> - partition reading &amp; writing benchmark</p>"},{"location":"VPS/","title":"VPS","text":""},{"location":"VPS/#vpshostingdomains","title":"VPS/Hosting/Domains","text":"<p>Here will be information related to VPS, hosting and domains management</p> <p>How to Install Let\u2019s Encrypt SSL on Ubuntu with Certbot</p>"},{"location":"Videolessons/","title":"Video lessons","text":"<p>Web Applications for Everybody - Dr. Chuck Teaches HTML, JavaScript, PHP, SQL, and More - 14 hours video ahead. Make yourself some tea and... Don't panic, Starman!</p> <p>HTML</p> <p>CSS</p> <p>Loops vs recursion</p> <p>Connecting React Frontent to Flask (python) backend</p> <p>Git for Professionals Tutorial - Tools &amp; Concepts for Mastering Version Control with Git - YouTube</p> <p>SQL injection</p>"},{"location":"books/","title":"Books","text":"<p>How to Design Programs, Second Edition</p> <p>Matthias Felleisen, Robert Bruce Findler, Matthew Flatt, Shriram Krishnamurthi</p> <p>Book: Data Engineering Design Patterns (DEDP) datascience</p> <p>A lot of books from Flavio - JavaScript, Python, C, Linux, HTML, CSS, Node.js, React, Next.js, PHP. Available online and download pdf/ePUB.</p> <p>JavaScript for impatient programmers (ES2021 edition)</p> <p>Code Simplicity: The Fundamentals of Software (Free eBook) \u00bb Code Simplicity</p> <p>About the Book</p> <p>This book contains the fundamental laws of software design\u2014the most important facts about software development that will let you understand what is going to happen with your software system in the future, based on the actions you take now. It gives you principles that you can think with, that will help you understand why and how to keep your systems maintainable, now and forever.</p> <p>It is applicable to all software development, in all languages, on all platforms.</p> <p>460 Free Textbooks \u2013 Math, Science, and More [Online PDF for College and High School]</p> <p>Python Data Science Handbook</p> <p>The Hitchhiker's Guide to Python</p> <p>Programming Languages: Application and Interpretation, often referred to by its initials as PLAI (pronounce it like \u201cplay\u201d). Over the years well over fifty academic institutions have used PLAI.</p> <p>Online release of Data-Oriented Design </p> <p>This is the free, online, reduced version. Some inessential chapters are excluded from this version, but in the spirit of this being an education resource, the essentials are present for anyone wanting to learn about data-oriented design.</p>"},{"location":"sql/","title":"DB and SQL","text":"<p>Database of Databases</p> <p>Discover and learn about 926 database management systems</p> <p>SQL tips and tricks</p> <p>'Can I Use' for SQL</p> <p>DbGate Open Source (no)SQL Database Client</p> <p>Extensive SQL documentation</p> <p>Running total (cumulative) in SQL</p> <p>Soft Deletion Probably Isn't Worth It</p> <p>Anyone who\u2019s seen a couple different production database environments is likely familiar with the \u201csoft deletion\u201d pattern \u2013 instead of deleting data directly via DELETE statement, tables get an extra deleted_at timestamp and deletion is performed with an update statement instead</p>"},{"location":"zhelpedit/","title":"Admin links","text":"<p>For full documentation visit mkdocs.org.</p> <p>Theme documentation</p>"},{"location":"zhelpedit/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>mkdocs gh-deploy</code> - Deploy site to GitHub Pages.</li> </ul>"},{"location":"zhelpedit/#if-jinja-brokes","title":"If jinja brokes","text":"<p>tweet</p> <p>Just a warning to folks in the Python docs ecosystem. It looks like the latest version of jinja (which deprecated features properly) has broken the latest mkdocs &amp; sphinx before 4.0. You can fix this by pinning <code>jinja2&lt;3.1.0</code> in your requirements</p>"},{"location":"Cheat%20Sheets/JavaScript/","title":"JavaScript","text":""},{"location":"Cheat%20Sheets/JavaScript/#loops","title":"Loops","text":""},{"location":"Cheat%20Sheets/JavaScript/#for","title":"for","text":"<p>More on MDN</p> <pre><code>for (let i = 0; i &lt; 5; i++)\n{\nconsole.log(i);\n}\n// OUTPUT: 0 1 2 3 4\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#forin","title":"for...in","text":"<p>More on MDN</p> <pre><code>const arr = [3, 5, 7];\narr.foo = 'hello';\nfor (let i in arr) {\nconsole.log(i);\n}\n// OUTPUT: \"0\", \"1\", \"2\", \"foo\"\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#forof","title":"for...of","text":"<p>More on MDN</p> <pre><code>const arr = [3, 5, 7];\nfor (let i of arr) {\nconsole.log(i);\n}\n// OUTPUT: 3, 5, 7\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#dowhile","title":"do...while","text":"<p>More on MDN</p> <pre><code>let iterator = 0;\ndo {\niterator++;\nconsole.log(iterator);\n} while (iterator &lt; 5);\n// OUTPUT: 1 2 3 4 5\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#while","title":"while","text":"<p>More on MDN</p> <pre><code>let iterator = 0;\nwhile (iterator &lt; 5) {\niterator++;\nconsole.log(iterator);\n}\n// OUTPUT: 1 2 3 4 5\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#js-es6","title":"JS ES6","text":""},{"location":"Cheat%20Sheets/JavaScript/#arrow-function","title":"Arrow function","text":"<pre><code>const sum = (a, b) =&gt; a + b\nconsole.log(sum(2, 6)) // OUTPUT: 8\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#default-parameters","title":"Default parameters","text":"<pre><code>function print(a = 5) {\nconsole.log(a)\n}\nprint() // OUTPUT: 5\nprint(22) // OUTPUT: 22\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#let-scope","title":"Let Scope","text":"<pre><code>let a = 3\nif (true) {\nlet a = 5\nconsole.log(a) // OUTPUT: 5\n}\nconsole.log(a) // OUTPUT: 3\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#const","title":"Const","text":"<pre><code>// can be assigned only once\nconst a = 55\na = 44 // throws an error\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#multiline-string","title":"Multiline string","text":"<pre><code>console.log(`\nThis is a\nmultiline string\n`)\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#template-strings","title":"Template strings","text":"<pre><code>const name = 'World';\nconst message = `Hello ${name}`;\nconsole.log(message); // OUTPUT: \"Hello World\"\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#exponent-operator","title":"Exponent operator","text":"<pre><code>const byte = 2 ** 8\n// Same as: Math.pow(2, 8)\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#spread-operator","title":"Spread operator","text":"<pre><code>const a = [ 1, 2 ]\nconst b = [ 3, 4 ]\nconst c = [ ...a, ...b ]\nconsole.log(c) // OUTPUT: [1, 2, 3, 4]\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#string-includes","title":"String <code>includes()</code>","text":"<pre><code>console.log('apple'.includes('pl')); // OUTPUT: true\nconsole.log('apple'.includes('tt')); // OUTPUT: false\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#string-startswith","title":"String <code>startsWith()</code>","text":"<pre><code>console.log('apple'.startsWith('ap')); // OUTPUT: true\nconsole.log('apple'.startsWith('bb')); // OUTPUT: false\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#string-repeat","title":"String <code>repeat()</code>","text":"<pre><code>console.log('ab'.repeat(3)); // OUTPUT: \"ababab\"\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#destructuring-array","title":"Destructuring <code>array</code>","text":"<pre><code>let [a, b] = [3, 7];\nconsole.log(a); // 3\nconsole.log(b); // 7\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#destructuring-object","title":"Destructuring <code>object</code>","text":"<pre><code>let obj = {\na: 55,\nb: 44\n};\nlet { a, b } = obj;\nconsole.log(a); // OUTPUT: 55\nconsole.log(b); // OUTPUT: 44\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#object-property-assignment","title":"Object <code>property</code> assignment","text":"<pre><code>const a = 2\nconst b = 5\nconst obj = { a, b }\n// Before es6:\n// obj = { a: a, b: b }\nconsole.log(obj) // OUTPUT: { a: 2, b: 5 }\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#object-function-assignment","title":"Object <code>function</code> assignment","text":"<pre><code>const obj = {\na: 5,\nb() {\nconsole.log('b')\n}\n}\nobj.b() // OUTPUT: \"b\"\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#objectassign","title":"<code>Object.assign()</code>","text":"<pre><code>const obj1 = { a: 1 }\nconst obj2 = { b: 2 }\nconst obj3 = Object.assign({}, obj1, obj2)\nconsole.log(obj3)\n// { a: 1, b: 2 }\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#objectentries","title":"<code>Object.entries()</code>","text":"<pre><code>const obj = {\nfirstName: 'FirstName',\nlastName: 'LastName',\nage: 24,\ncountry: 'India',\n};\nconst entries = Object.entries(obj);\n/* returns an array of [key, value]\npairs of the object passed */\nconsole.log(entries);\n/* prints\n[\n['firstName', 'FirstName'],\n['lastName', 'LastName'],\n['age', 24],\n['country', 'India']\n]; */\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#promises-with-finally","title":"Promises with <code>finally</code>","text":"<pre><code>promise\n.then((result) =&gt; { \u00b7\u00b7\u00b7 })\n.catch((error) =&gt; { \u00b7\u00b7\u00b7 })\n.finally(() =&gt; { /* logic\n    independent of success/error */ })\n/* The handler is called when the\npromise is fulflled or rejected.*/\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#destructuring-nested-objects","title":"Destructuring Nested Objects","text":"<pre><code>const Person = {\nname: \"Harry Potter\",\nage: 29,\nsex: \"male\",\nmaterialStatus: \"single\",\naddress: {\ncountry: \"USA\",\nstate: \"Nevada\",\ncity: \"Carson City\",\npinCode: \"500014\",\n},\n};\nconst { address : { state, pinCode }, name } = Person;\nconsole.log(name, state, pinCode)\n// Harry Potter Nevada 500014\nconsole.log(city) // ReferenceError\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#spread-operator_1","title":"Spread operator","text":"<pre><code>const a = {\nfirstName: \"FirstName\",\nlastName: \"LastName1\",\n}\nconst b = {\n...a,\nlastName: \"LastName2\",\ncanSing: true,\n}\nconsole.log(a)\n//{firstName: \"FirstName\", lastName: \"LastName1\"}\nconsole.log(b)\n/* {firstName: \"FirstName\", lastName: \"LastName2\",\ncanSing: true} */\n/* great for modifying objects without side\neffects/affecting the original */\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#arrays-destructuring","title":"Arrays destructuring","text":""},{"location":"Cheat%20Sheets/JavaScript/#assigning-array-items-to-variables","title":"Assigning <code>array</code> items to variables","text":"<pre><code>const [a, b, c] = [123, 'second', true];\n// a =&gt; 123\n// b =&gt; 'second'\n// c =&gt; true\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#skipping-items","title":"Skipping items","text":"<pre><code>const [, b] = [123, 'second', true];\n// b =&gt; 'second'\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#assigning-the-first-values-storing-the-rest-together","title":"Assigning the first values, storing the rest together","text":"<pre><code>const [a, b, ...rest] = [123, 'second', true, false, 42];\n// a =&gt; 123\n// b =&gt; 'second'\n// rest =&gt; [true, false, 42]\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#swapping-variables","title":"Swapping variables","text":"<pre><code>let x = true;\nlet y = false;\n[x, y] = [y, x];\n// x =&gt; false\n// y =&gt; true\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#string-methods","title":"String methods","text":""},{"location":"Cheat%20Sheets/JavaScript/#charat","title":"<code>charAt()</code>","text":"<p>More on MDN</p> <pre><code>let txt = 'Hello World';\nconsole.log(txt.charAt(0)); // OUTPUT: 'H'\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#concat","title":"<code>concat()</code>","text":"<p>More on MDN</p> <pre><code>let str1 = 'Hello ';\nlet str2 = 'World';\nconsole.log(str1.concat(str2)); // OUTPUT: 'Hello world';\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#indexof","title":"<code>indexOf()</code>","text":"<p>More on MDN</p> <pre><code>let txt = 'Lets find where the `pen` is';\nconsole.log(txt.indexOf('pen')); // OUTPUT: 21\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#replace","title":"<code>replace()</code>","text":"<p>More on MDN</p> <pre><code>let str = 'Hello Dev!'\nconsole.log(str.replace('Dev', 'World')); // OUTPUT: 'Hello World'\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#search","title":"<code>search()</code>","text":"<p>More on MDN</p> <pre><code>let str = 'Hello dev';\nconsole.log(str.search('dev')); // OUTPUT: 6\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#slice","title":"<code>slice()</code>","text":"<p>More on MDN</p> <pre><code>let str1 = 'The morning is upon us.', // the length of str1 is 23.\nstr2 = str1.slice(1, 8),\nstr3 = str1.slice(4, -2),\nstr4 = str1.slice(12),\nstr5 = str1.slice(30);\nconsole.log(str2)  // OUTPUT: he morn\nconsole.log(str3)  // OUTPUT: morning is upon u\nconsole.log(str4)  // OUTPUT: is upon us.\nconsole.log(str5)  // OUTPUT: \"\"\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#substring","title":"<code>substring()</code>","text":"<p>More on MDN</p> <pre><code>const str = 'Mozilla';\nconsole.log(str.substring(1, 3));\n// expected output: \"oz\"\nconsole.log(str.substring(2));\n// expected output: \"zilla\"\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#substr","title":"<code>substr()</code>","text":"<p>Deprecated. Not for use in new websites. More on MDN</p> <pre><code>const str = 'Mozilla';\nconsole.log(str.substr(1, 2));\n// expected output: \"oz\"\nconsole.log(str.substr(2));\n// expected output: \"zilla\"\n</code></pre> <p>Difference between <code>substr()</code> and <code>substring()</code></p> <pre><code>let text = 'Mozilla'\nconsole.log(text.substring(2,5))  // =&gt; \"zil\"\nconsole.log(text.substr(2,3))     // =&gt; \"zil\"\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#touppercase-tolowercase","title":"<code>toUpperCase()</code> / <code>toLowerCase()</code>","text":"<p><code>toUpperCase()</code> on MDN | <code>toLowerCase()</code> on MDN</p> <pre><code>const sentence = 'The quick brown fox jumps over the lazy dog.';\nconsole.log(sentence.toUpperCase());\n// expected output: \"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\"\nconst allcaps = 'HAPPY CAPSLOCK DAY!';\nconsole.log(allcaps.toLowerCase());\n// EXPECTED OUTPOOT: \"HAPPY CAPSLOCK DAY!\"\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#valueof","title":"<code>valueOf()</code>","text":"<p>More on MDN</p> <pre><code>var x = new String('Hello world');\nconsole.log(x.valueOf()); // Displays 'Hello world'\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#trim","title":"<code>trim()</code>","text":"<p>Mode on MDN</p> <pre><code>const greeting = '   Hello world!   ';\nconsole.log(greeting);\n// expected output: \"   Hello world!   \";\nconsole.log(greeting.trim());\n// expected output: \"Hello world!\";\n</code></pre> <p><code>toString()</code> More on MDN</p> <pre><code>const myNumber = 535;\nconsole.log(myNumber.toString()); // OUTPUT: \"535\";\n</code></pre> <p><code>includes()</code> More on MDN</p> <pre><code>const sentence = 'The quick brown fox jumps over the lazy dog.';\nconst word = 'fox';\nconsole.log(sentence.includes(word)); // OUTPUT: true\n</code></pre> <p><code>charCodeAt()</code> More on MDN</p> <pre><code>let word = 'TEST';\nconsole.log(word.charCodeAt(0)); // OUTPUT: 84\n</code></pre> <p><code>match()</code> More on MDN</p> <pre><code>const paragraph = 'The quick brown fox jumps over the lazy dog. It barked.';\nconst found = paragraph.match(\"th\");\nconsole.log(found); // OUTPUT: [\"th\"]\n</code></pre> <p><code>split()</code> More on MDN</p> <pre><code>const str = 'The quick brown fox jumps over the lazy dog.';\nconst words = str.split(' ');\nconsole.log(words[3]);\n// expected output: \"fox\"\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#javascript-asyncawait","title":"JavaScript Async/Await","text":""},{"location":"Cheat%20Sheets/JavaScript/#async","title":"Async","text":"<p>When we append the keyword <code>async</code> to the <code>function</code>, this <code>function</code> returns the <code>Promise</code> by default on execution. Async keyword provides extra information to the user of the function:</p> <ul> <li>The function contains some Asynchronous Execution</li> <li>The returned value will be the Resolved Value for the Promise</li> </ul> <pre><code>async function f() {\nreturn 1;\n}\nf().then(alert); // OUTPUT: 1\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#await","title":"Await","text":"<p>The keyword <code>await</code> makes JavaScript wait until that promise settles and returns its result</p> <ul> <li>The <code>await</code> works only inside <code>async</code> functions</li> </ul> <pre><code>async function f() {\nlet promise = new Promise((resolve, reject) =&gt; {\nsetTimeout(() =&gt; resolve(\"done!\"), 1000)\n});\nlet result = await promise; // wait until the promise resolves\nalert(result); // OUTPUT: \"done!\"\n}\nf();\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#api-calls","title":"API calls","text":""},{"location":"Cheat%20Sheets/JavaScript/#xml-http-request","title":"XML HTTP Request","text":"<ul> <li>All modern browsers support the XMLHttpRequest <code>object</code> to <code>request</code> data from a server.</li> <li>It works on the oldest browsers as well as on new ones.</li> <li>It was deprecated in ES6 but is still widely used.</li> </ul> <pre><code>var request = new XMLHttpRequest();\nrequest.open('GET',\n'https://jsonplaceholder.typicode.com/todos')\nrequest.send();\nrequest.onload = () =&gt; {\nconsole.log(JSON.parse(request.response));\n}\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#fetch","title":"Fetch","text":"<ul> <li>The Fetch API provides an interface for fetching resources (including across the network) in an asynchronous manner.</li> <li>It returns a Promise</li> <li>It is an object which contains a single value either a Response or an Error that occurred.</li> <li><code>.then()</code> tells the program what to do once Promise is completed.</li> </ul> <pre><code>fetch('https://jsonplaceholder.typicode.com/todos'\n).then(response =&gt; {\nreturn response.json();\n}).then(data =&gt; {\nconsole.log(data);\n})\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#axios","title":"Axios","text":"<ul> <li>It is an open-source library for making HTTP requests.</li> <li>It works on both Browsers and Node.js</li> <li>It can be included in an HTML file by using an external CDN</li> <li>It also returns promises like fetch API</li> </ul> <pre><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"&gt;&lt;/script&gt;\naxios.get(\"https://jsonplaceholder.typicode.com/todos\")\n.then(response =&gt;{\nconsole.log(response.data)\n})\n</code></pre>"},{"location":"Cheat%20Sheets/JavaScript/#jquery-ajax","title":"jQuery AJAX","text":"<ul> <li>It performs asynchronous HTTP requests.</li> <li>Uses <code>$.ajax()</code> method to make the requests.</li> </ul> <pre><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"&gt;\n&lt;/script&gt;\n$(document).ready(function(){\n$.ajax({\nurl: \"https://jsonplaceholder.typicode.com/todos\",\ntype: \"GET\",\nsuccess: function(result){\nconsole.log(result);\n}\n})\n})\n</code></pre>"},{"location":"Code%20Snippets/html/","title":"HTML","text":"<p>HTML datalist</p> <pre><code>&lt;html&gt;\n  &lt;h1&gt;Plain HTML search&lt;/h1&gt;\n  &lt;input list=\"test\" placeholder=\"Choose from the list...\"/&gt;\n  &lt;datalist id=\"test\"&gt;\n    &lt;option value=\"Dainius\"&gt;\n    &lt;option value=\"Dainius\"&gt;\n    &lt;option value=\"Dainius\"&gt;\n    &lt;option value=\"Dainius\"&gt;\n    &lt;option value=\"Dainius\"&gt;\n  &lt;/datalist&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Code%20Snippets/js/","title":"JavaScript","text":""},{"location":"Code%20Snippets/js/#alertprompt","title":"Alert/Prompt","text":"<p>Gauti atsakym\u0105 \u012f klausim\u0105 i\u0161 <code>prompt</code> ir j\u012f pateikti, jei <code>true</code>, pakeisti \u012f prie\u0161ing\u0105 ir patekti, jei <code>false</code>:</p> <p><pre><code>let answer = confirm('Ar tavo PGR testas yra teigiamas?')\n\nif (answer) {\nalert(answer + ' Sveikiname! tu sergi Covid ;)');\n} if (!answer) {\nanswer = !answer;\nalert(answer + ' Sveikiname - tu pasveikai!')\n}\n</code></pre> Patikrinti, ar \u012f <code>prompt</code> atsakym\u0105 pateikstas skai\u010dius, ar kito tipo <code>string</code>:</p> <pre><code>let answer = prompt('\u012eveskite bet k\u0105: ')\n\nif (isNaN(Number(answer))) {\nalert('J\u016bs \u012fved\u0117te \"' + answer + '\", ta\u010diau tai - ne skai\u010dius.')\n} if (!isNaN(answer)) {\nalert('J\u016bs \u012fved\u0117te skai\u010di\u0173 ' + answer); }\n//veikia ir su console.log()\n</code></pre>"},{"location":"Code%20Snippets/js/#programa-pilnametis","title":"Programa 'Pilnametis'","text":"<ol> <li>Paprastas variantas:</li> </ol> <pre><code>let answer = prompt('Kiek tau met\u0173: ')\n\nif (Number(answer) &lt; 18) {\nalert('Iki 18 tau liko ' + (18 - answer));\n} else if (Number(answer) &lt; 21) {\nalert('Iki 21 tau liko ' + (21 - answer)); } else {\nalert('Tu jau visi\u0161kai pilnametis!')\n}\n</code></pre> <ol> <li><code>switch</code> variantas:</li> </ol> <p><pre><code>let answer = prompt('Kiek tau met\u0173: ')\n\nswitch(answer) {\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\ncase '10':\ncase '11':\ncase '12':\ncase '13':\ncase '14':\ncase '15':\ncase '16':\ncase '17':\nalert('Iki 18 tau liko ' + (18 - Number(answer)));\nbreak;\ncase '18':\ncase '19':\ncase '20':\nalert('Iki 21 tau liko ' + (21 - Number(answer)));\nbreak;\ndefault:\nalert('Tu jau visi\u0161kai pilnametis!')\n}\n</code></pre> 3. \"Pilnametis\" parenkant <code>array</code> element\u0105:</p> <pre><code>let answer = prompt('Kiek tau met\u0173: ')\nlet i;\nif (Number(answer) &lt; 18) {i = 0}\nelse if (Number(answer) &lt; 21) {i = 1}\nelse i = 2;\nlet list = [`Iki 18 tau liko ${18-answer}`,\n`Iki 21 tau liko ${21-answer}`,\n'Tu jau visi\u0161kai pilnametis'];\nalert(list[i]);\n</code></pre>"},{"location":"Code%20Snippets/js/#namu-darbai-sukurti-objekta-ji-uzpildyti-ir-isvesti-viska-i-kosole-ar-alerta","title":"Nam\u0173 darbai - sukurti objekt\u0105, j\u012f u\u017epildyti ir i\u0161vesti visk\u0105 \u012f kosol\u0119 ar alert\u0105","text":"<pre><code>let vardas = prompt('Koks tavo vardas: ');\nlet amzius = prompt('Kiek tau met\u0173: ');\nlet miestas = prompt('I\u0161 kokio miesto esi: ');\n\nlet person = {};\nperson.vardas = vardas;\nperson.amzius = amzius;\nperson.miestas = miestas;\n\nlet i;\nif (Number(amzius) &lt; 18) {i = 0}\nelse if (Number(amzius) &lt; 21) {i = 1}\nelse i = 2;\n\nlet list = [`Iki 18 tau liko ${18-amzius}`,\n`Iki 21 tau liko ${21-amzius}`,\n'Tu jau visi\u0161kai pilnametis'];\n\nlet answer = `Tavo vardas - ${person.vardas}.\nTavo miestas - ${person.miestas}.\nTavo am\u017eius - ${person.amzius}.\n${list[i]}.`;\n\nconsole.log(answer);\nalert(answer);\n</code></pre>"},{"location":"Code%20Snippets/js/#array-and-object-manipulation","title":"<code>Array</code> and <code>Object</code> manipulation","text":"<pre><code>let kiek = prompt('Keli\u0173 asmen\u0173 duomenis norite \u012fvesti: ');\nlet counter = 0;\nlet persons = [];\n\nwhile (counter &lt; kiek) {\nlet name = prompt('Koks tavo vardas: ');\nlet amzius = prompt('Kiek tau met\u0173: ');\nlet obj = {\nvardas: name,\namzius: amzius,\n};\npersons.push(obj);\ncounter++;\n}\n\nconsole.log(persons);\n</code></pre>"},{"location":"Code%20Snippets/ruby/","title":"Ruby/Rails","text":"<pre><code>today = Date.today\n#=&gt; Mon, 03 Oct 2022\ntoday.end_of_week\n#=&gt; Sun, 09 Oct 2022\ntoday.beginning_of_month\n#=&gt; Sat, 01 Oct 2022\ntoday.end_of_quarter\n#=&gt; Sat, 31 Dec 2022\ntoday.beginning_of_year\n#=&gt; Sat, 01 Jan 2022\ntoday.all_day\n#=&gt; Mon, 03 Oct 2022 00:00:00.000000000 UTC +00:00..\n#=&gt; Mon, 03 Oct 2022 23:59:59.999999999 UTC +00:00\ntoday.all_week\n#=&gt; Mon, 03 Oct 2022..Sun, 09 Oct 2022\ntoday.all_month\n#=&gt; Sat, 01 Oct 2022..Mon, 31 Oct 2022\ntoday.all_year\n#=&gt; Sat, 01 Jan 2022..Sat, 31 Dec 2022\ntoday.on_weekday?\n#=&gt; true\ntoday.next_occurring(:thursday)\n#=&gt; Thurs, 06 Oct 2022\n\n# \u2026and DateTime:\n\nright_now = Time.zone.now\n#=&gt; Mon, 03 Oct 2022 08:30:23.666835000 UTC +00:00\nright_now.beginning_of_day\n#=&gt; Mon, 03 Oct 2022 00:00:00.000000000 UTC +00:00\nright_now.end_of_week\n#=&gt; Sun, 09 Oct 2022 23:59:59.999999999 UTC +00:00\nright_now.beginning_of_month\n#=&gt; Sat, 01 Oct 2022 00:00:00.000000000 UTC +00:00\nright_now.end_of_quarter\n#=&gt; Sat, 31 Dec 2022 23:59:59.999999999 UTC +00:00\nright_now.beginning_of_year\n#=&gt; Sat, 01 Jan 2022 00:00:00.000000000 UTC +00:00\nright_now.all_day\n#=&gt; Mon, 03 Oct 2022 00:00:00.000000000 UTC +00:00..\n#=&gt; Mon, 03 Oct 2022 23:59:59.999999999 UTC +00:00\ntoday.all_week\n#=&gt; Mon, 03 Oct 2022 00:00:00.000000000 UTC +00:00..\n#=&gt; Sun, 09 Oct 2022 23:59:59.999999999 UTC +00:00\ntoday.all_month\n#=&gt; Sat, 01 Oct 2022 00:00:00.000000000 UTC +00:00..\n#=&gt; Mon, 31 Oct 2022 23:59:59.999999999 UTC +00:00\nright_now.all_year\n#=&gt; Sat, 01 Jan 2022 00:00:00.000000000 UTC +00:00..\n#=&gt; Sat, 31 Dec 2022 23:59:59.999999999 UTC +00:00\nright_now.on_weekday?\n#=&gt; true\nright_now.next_occurring(:thursday)\n#=&gt; Thurs, 06 Oct 2022 08:30:23.666835000 UTC +00:00\n</code></pre>"},{"location":"Code%20Snippets/sql/","title":"SQL","text":""},{"location":"Code%20Snippets/sql/#how-to-get-the-mysql-table-columns-data-type","title":"How to get the MySQL table columns data type?","text":"<p>original source</p>"},{"location":"Code%20Snippets/sql/#first-option","title":"First option","text":"<p>The first option has 4 different aliases, some of which are quite short :</p> <pre><code>EXPLAIN db_name.table_name;\nDESCRIBE db_name.table_name;\nSHOW FIELDS FROM db_name.table_name;\nSHOW COLUMNS FROM db_name.table_name;\n</code></pre> <p>NB: In each case, you can also write <code>FROM</code> two times instead of <code>db_name.table_name</code>, example:</p> <pre><code>SHOW FIELDS FROM table_name FROM db_name\n</code></pre> <p>This gives something like :</p> <pre><code>+------------------+--------------+------+-----+---------+-------+\n| Field            | Type         | Null | Key | Default | Extra |\n+------------------+--------------+------+-----+---------+-------+\n| product_id       | int(11)      | NO   | PRI | NULL    |       |\n| name             | varchar(255) | NO   | MUL | NULL    |       |\n| description      | text         | NO   |     | NULL    |       |\n| meta_title       | varchar(255) | NO   |     | NULL    |       |\n+------------------+--------------+------+-----+---------+-------+\n</code></pre>"},{"location":"Code%20Snippets/sql/#second-option","title":"Second option","text":"<p>The second option is a bit longer :</p> <pre><code>SELECT\nCOLUMN_NAME, DATA_TYPE FROM\nINFORMATION_SCHEMA.COLUMNS WHERE\nTABLE_SCHEMA = 'db_name'\nAND\nTABLE_NAME = 'table_name';\n</code></pre> <p>It is also less talkative :</p> <pre><code>+------------------+-----------+\n| column_name      | DATA_TYPE |\n+------------------+-----------+\n| product_id       | int       |\n| name             | varchar   |\n| description      | text      |\n| meta_title       | varchar   |\n+------------------+-----------+\n</code></pre> <p>It has the advantage of allowing selection per column, though, using <code>AND COLUMN_NAME = 'column_name'</code> (or <code>like</code>).</p>"},{"location":"Fun%20Corner/perlisms/","title":"Perlisms","text":"<p>Perlisisms - \"Epigrams in Programming\" by Alan J. Perlis</p>"},{"location":"Fun%20Corner/perlisms/#epigrams-in-programming","title":"EPIGRAMS IN PROGRAMMING","text":"<p>1. One man's constant is another man's variable.</p> <p>2. Functions delay binding; data structures induce binding. Moral: Structure data late in the programming process.</p> <p>3. Syntactic sugar causes cancer of the semicolon.</p> <p>4. Every program is a part of some other program and rarely fits.</p> <p>5. If a program manipulates a large amount of data, it does so in a small number of ways.</p> <p>6. Symmetry is a complexity-reducing concept (co-routines include subroutines); seek it everywhere.</p> <p>7. It is easier to write an incorrect program than understand a correct one.</p> <p>8. A programming language is low level when its programs require attention to the irrelevant.</p> <p>9. It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.</p> <p>10. Get into a rut early: Do the same process the same way. Accumulate idioms. Standardize. The only difference(!) between Shakespeare and you was the size of his idiom list - not the size of his vocabulary.</p> <p>11. If you have a procedure with ten parameters, you probably missed some.</p> <p>12. Recursion is the root of computation since it trades description for time.</p> <p>13. If two people write exactly the same program, each should be put into microcode and then they certainly won't be the same.</p> <p>14. In the long run every program becomes rococo - then rubble.</p> <p>15. Everything should be built top-down, except the first time.</p> <p>16. Every program has (at least) two purposes: the one for which it was written, and another for which it wasn't.</p> <p>17. If a listener nods his head when you're explaining your program, wake him up.</p> <p>18. A program without a loop and a structured variable isn't worth writing.</p> <p>19. A language that doesn't affect the way you think about programming, is not worth knowing.</p> <p>20. Wherever there is modularity there is the potential for misunderstanding: Hiding information implies a need to check communication.</p> <p>21. Optimization hinders evolution.</p> <p>22. A good system can't have a weak command language.</p> <p>23. To understand a program you must become both the machine and the program.</p> <p>24. Perhaps if we wrote programs from childhood on, as adults we'd be able to read them.</p> <p>25. One can only display complex information in the mind. Like seeing, movement or flow or alteration of view is more important than the static picture, no matter how lovely.</p> <p>26. There will always be things we wish to say in our programs that in all known languages can only be said poorly.</p> <p>27. Once you understand how to write a program get someone else to write it.</p> <p>28. Around computers it is difficult to find the correct unit of time to measure progress. Some cathedrals took a century to complete. Can you imagine the grandeur and scope of a program that would take as long?</p> <p>29. For systems, the analogue of a face-lift is to add to the control graph an edge that creates a cycle, not just an additional node.</p> <p>30. In programming, everything we do is a special case of something more general -- and often we know it too quickly.</p> <p>31. Simplicity does not precede complexity, but follows it.</p> <p>32. Programmers are not to be measured by their ingenuity and their logic but by the completeness of their case analysis.</p> <p>33. The eleventh commandment was \"Thou Shalt Compute\" or \"Thou Shalt Not Compute\" - I forget which.</p> <p>34. The string is a stark data structure and everywhere it is passed there is much duplication of process. It is a perfect vehicle for hiding information.</p> <p>35. Everyone can be taught to sculpt: Michelangelo would have had to be taught not to. So it is with great programmers.</p> <p>36. The use of a program to prove the 4-color theorem will not change mathematics - it merely demonstrates that the theorem, a challenge for a century, is probably not important to mathematics.</p> <p>37. The most important computer is the one that rages in our skulls and ever seeks that satisfactory external emulator. The standarization of real computers would be a disaster - and so it probably won't happen.</p> <p>38. Structured Programming supports the law of the excluded middle.</p> <p>39. Re graphics: A picture is worth 10K words - but only those to describe the picture. Hardly any sets of 10K words can be adequately described with pictures.</p> <p>40. There are two ways to write error-free programs; only the third one works.</p> <p>41. Some programming languages manage to absorb change, but withstand progress.</p> <p>42. You can measure a programmer's perspective by noting his attitude on the continuing vitality of FORTRAN.</p> <p>43. In software systems, it is often the early bird that makes the worm.</p> <p>44.Sometimes I think the only universal in the computing field is the fetch-execute cycle.</p> <p>45. The goal of computation is the emulation of our synthetic abilities, not the understanding of our analytic ones.</p> <p>46. Like punning, programming is a play on words.</p> <p>47. As Will Rogers would have said, \"There is no such thing as a free variable.\"</p> <p>48. The best book on programming for the layman is \"Alice in Wonderland\"; but that's because it's the best book on anything for the layman.</p> <p>49. Giving up on assembly language was the apple in our Garden of Eden: Languages whose use squanders machine cycles are sinful. The LISP machine now permits LISP programmers to abandon bra and fig-leaf.</p> <p>50. When we understand knowledge-based systems, it will be as before -- except our fingertips will have been singed.</p> <p>51. Bringing computers into the home won't change either one, but may revitalize the corner saloon.</p> <p>52. Systems have sub-systems and sub-systems have sub- systems and so on ad infinitum - which is why we're always starting over.</p> <p>53. So many good ideas are never heard from again once they embark in a voyage on the semantic gulf.</p> <p>54. Beware of the Turing tar-pit in which everything is possible but nothing of interest is easy.</p> <p>55. A LISP programmer knows the value of everything, but the cost of nothing.</p> <p>56. Software is under a constant tension. Being symbolic it is arbitrarily perfectible; but also it is arbitrarily changeable.</p> <p>57. It is easier to change the specification to fit the program than vice versa.</p> <p>58. Fools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses remove it.</p> <p>59. In English every word can be verbed. Would that it were so in our programming languages.</p> <p>60. In seeking the unattainable, simplicity only gets in the way.</p> <p>61. In programming, as in everything else, to be in error is to be reborn.</p> <p>62. In computing, invariants are ephemeral.</p> <p>63. When we write programs that \"learn\", it turns out that we do and they don't.</p> <p>64. Often it is the means that justify the ends: Goals advance technique and technique survives even when goal structures crumble.</p> <p>65. Make no mistake about it: Computers process numbers - not symbols. We measure our understanding (and control) by the extent to which we can arithmetize an activity.</p> <p>66. Making something variable is easy. Controlling duration of constancy is the trick.</p> <p>67. Think of all the psychic energy expended in seeking a fundamental distinction between \"algorithm\" and \"program\".</p> <p>68. If we believe in data structures, we must believe in independent (hence simultaneous) processing. For why else would we collect items within a structure? Why do we tolerate languages that give us the one without the other?</p> <p>69. In a 5 year period we get one superb programming language. Only we can't control when the 5 year period will be.</p> <p>70. Over the centuries the Indians developed sign language for communicating phenomena of interest. Programmers from different tribes (FORTRAN, LISP, ALGOL, SNOBOL, etc.) could use one that doesn't require them to carry a blackboard on their ponies.</p> <p>71. Documentation is like term insurance: It satisfies because almost no one who subscribes to it depends on its benefits.</p> <p>72. An adequate bootstrap is a contradiction in terms.</p> <p>73. It is not a language's weakness but its strengths that control the gradient of its change: Alas, a language never escapes its embryonic sac.</p> <p>74. Is it possible that software is not like anything else, that it is meant to be discarded: that the whole point is to see it as a soap bubble?</p> <p>75. Because of its vitality, the computing field is always in desperate need of new cliches: Banality soothes our nerves.</p> <p>76. It is the user who should parameterize procedures, not their creators.</p> <p>77. The cybernetic exchange between man, computer and algorithm is like a game of musical chairs: The frantic search for balance always leaves one of the three standing ill at ease.</p> <p>78. If your computer speaks English, it was probably made in Japan.</p> <p>79. A year spent in artificial intelligence is enough to make one believe in God.</p> <p>80. Prolonged contact with the computer turns mathematicians into clerks and vice versa.</p> <p>81. In computing, turning the obvious into the useful is a living definition of the word \"frustration\".</p> <p>82. We are on the verge: Today our program proved Fermat's next-to-last theorem.</p> <p>83. What is the difference between a Turing machine and the modern computer? It's the same as that between Hillary's ascent of Everest and the establishment of a Hilton hotel on its peak.</p> <p>84. Motto for a research laboratory: What we work on today, others will first think of tomorrow.</p> <p>85. Though the Chinese should adore APL, it's FORTRAN they put their money on.</p> <p>86. We kid ourselves if we think that the ratio of procedure to data in an active data-base system can be made arbitrarily small or even kept small.</p> <p>87. We have the mini and the micro computer. In what semantic niche would the pico computer fall?</p> <p>88. It is not the computer's fault that Maxwell's equations are not adequate to design the electric motor.</p> <p>89. One does not learn computing by using a hand calculator, but one can forget arithmetic.</p> <p>90. Computation has made the tree flower.</p> <p>91. The computer reminds one of Lon Chaney -- it is the machine of a thousand faces.</p> <p>92. The computer is the ultimate polluter: its feces are indistinguish- able from the food it produces.</p> <p>93. When someone says \"I want a programming language in which I need only say what I wish done,\" give him a lollipop.</p> <p>94. Interfaces keep things tidy, but don't accelerate growth: Functions do.</p> <p>95. Don't have good ideas if you aren't willing to be responsible for them.</p> <p>96. Computers don't introduce order anywhere as much as they expose opportunities.</p> <p>97. When a professor insists computer science is X but not Y, have compassion for his graduate students.</p> <p>98. In computing, the mean time to failure keeps getting shorter.</p> <p>99. In man-machine symbiosis, it is man who must adjust: The machines can't.</p> <p>100. We will never run out of things to program as long as there is a single program around.</p> <p>101. Dealing with failure is easy: Work hard to improve. Success is also easy to handle: You've solved the wrong problem. Work hard to improve.</p> <p>102. One can't proceed from the informal to the formal by formal means.</p> <p>103. Purely applicative languages are poorly applicable.</p> <p>104. The proof of a system's value is its existence.</p> <p>105. You can't communicate complexity, only an awareness of it.</p> <p>106. It's difficult to extract sense from strings, but they're the only communication coin we can count on.</p> <p>107. The debate rages on: is PL/I Bachtrian or Dromedary?</p> <p>108. Whenever two programmers meet to criticize their programs, both are silent.</p> <p>109. Think of it! With VLSI we can pack 100 ENIACS in 1 sq. cm.</p> <p>110. Editing is a rewording activity.</p> <p>111. Why did the Roman Empire collapse? What is Latin for office automation?</p> <p>112. Computer Science is embarrassed by the computer.</p> <p>113. The only constructive theory connecting neuroscience and psychology will arise from the study of software.</p> <p>114. Within a computer natural language is unnatural.</p> <p>115. Most people find the concept of programming obvious, but the doing impossible.</p> <p>116. You think you know when you can learn, are more sure when you can write, even more when you can teach, but certain when you can program.</p> <p>117. It goes against the grain of modern education to teach children to program. What fun is there in making plans, acquiring discipline in organizing thoughts, devoting attention to detail and learning to be self-critical?</p> <p>118. If you can imagine a society in which the computer- robot is the only menial, you can imagine anything.</p> <p>119. Programming is an unnatural act.</p> <p>120. Adapting old programs to fit new machines usually means adapting new machines to behave like old ones.</p>"},{"location":"Fun%20Corner/perlisms/#from-acms-sigplan-publication-september-1982-article-epigrams-in-programming-by-alan-j-perlis-of-yale-university","title":"From ACM's SIGPLAN publication, (September, 1982), Article \"Epigrams in Programming\", by Alan J. Perlis of Yale University.","text":""}]}