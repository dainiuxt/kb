{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Knowledge Base How to learn Learning How to Learn Free Coursera course: 15 hours beginner course. Powerful mental tools to help you master tough subjects. How to Remember More of What You Learn with Spaced Repetition If you like what you see here, you can buy me a coffee. Thanks!","title":"Knowledge Base"},{"location":"#knowledge-base","text":"","title":"Knowledge Base"},{"location":"#how-to-learn","text":"Learning How to Learn Free Coursera course: 15 hours beginner course. Powerful mental tools to help you master tough subjects. How to Remember More of What You Learn with Spaced Repetition If you like what you see here, you can buy me a coffee. Thanks!","title":"How to learn"},{"location":"00ProjectIdeas/","text":"Project ideas Ideas for projects to build for your portfolio. 16 front-end projects (with designs) to help improve your coding skills Projects to build that would get you hired as a beginner. - DEV Frontend Mentor | Front-end coding challenges using a real-life workflow Solve real-world HTML, CSS and JavaScript challenges whilst working to professional designs. Join 234,822 developers building projects, reviewing code, and helping each other get better. How to create a dashboard in Python with Jupyter Notebook? The demo of the financial dashboard created in Python with Jupyter Notebook and published with Mercury A collective list of free APIs","title":"Project ideas"},{"location":"00ProjectIdeas/#project-ideas","text":"Ideas for projects to build for your portfolio. 16 front-end projects (with designs) to help improve your coding skills Projects to build that would get you hired as a beginner. - DEV Frontend Mentor | Front-end coding challenges using a real-life workflow Solve real-world HTML, CSS and JavaScript challenges whilst working to professional designs. Join 234,822 developers building projects, reviewing code, and helping each other get better. How to create a dashboard in Python with Jupyter Notebook? The demo of the financial dashboard created in Python with Jupyter Notebook and published with Mercury A collective list of free APIs","title":"Project ideas"},{"location":"00Resources/","text":"Resources General resources This is collection of usefull resources to help progress on Your path to become a Web Developer. Tech Interview HandBook W3C.org - the web standard DevDocs API Documentation - (Almost) all documentation in one place MDN Web Docs W3schools Variuos resources Use DevTools like a PRO Free hosting services for web developers - DEV Community Become a programmer: The missing lessons - DEV Resources to become a Well-Rounded Full-Stack Developer | Azure SQL Devs\u2019 Corner A career in web development in 2021 Emmet shortcuts and docs 5 GitHub Repos for creating Resumes - DEV Community - Why write a resume when we can code it. Faster & GDPR friendly Fonts Bunny Fonts is an open-source, privacy-first web font platform designed to put privacy back into the internet. With a zero-tracking and no-logging policy, Bunny Fonts helps you stay fully GDPR compliant and puts your user's personal data into their own hands. Additionally, you can enjoy lightning-fast load times thanks to bunny.net's global CDN network to help improve SEO and deliver a better user experience. Reading/Info Five books to read for software engineer The Passionate Programmer: Creating a Remarkable Career in Software Development The Pragmatic Programmer - your journey to mastery(20th Anniversary Edition) Unwritten Laws of Engineering - Second Edition Remote: Office Not Required Explain the Cloud Like I\u2019m 10 How To Learn Stuff Quickly It's often said that the internet has democratized education: the sum of human knowledge is only a Google search away! And yet, having access to information is only half of the story; you also need to be able to convert raw information into usable skills. For a lot of us, the gap between the two can lead to things like tutorial hell\u2014getting stuck doing tutorial after tutorial without ever feeling like you're making substantive progress. How to Go From Coding Tutorials to Building Apps in 5 Steps - DEV Community Useful Resources To Learn Web Development & To Create Your Website Tips You Should know for Visual Studio Code - VSCode Learning Tips for Programmers \u00b7 We Learn Code 7 Useful VS Code extension for junior web developers - DEV Community Self tought Software Engineer thoughts on learning 4 Books that are not about computers that made me a good Software Developer Everything You Need to Know About Forming a Professional Support Network - CodeNewbie Community 17 Website Templates HTML Free Download - DEV Community","title":"Resources"},{"location":"00Resources/#resources","text":"","title":"Resources"},{"location":"00Resources/#general-resources","text":"This is collection of usefull resources to help progress on Your path to become a Web Developer. Tech Interview HandBook W3C.org - the web standard DevDocs API Documentation - (Almost) all documentation in one place MDN Web Docs W3schools","title":"General resources"},{"location":"00Resources/#variuos-resources","text":"Use DevTools like a PRO Free hosting services for web developers - DEV Community Become a programmer: The missing lessons - DEV Resources to become a Well-Rounded Full-Stack Developer | Azure SQL Devs\u2019 Corner A career in web development in 2021 Emmet shortcuts and docs 5 GitHub Repos for creating Resumes - DEV Community - Why write a resume when we can code it. Faster & GDPR friendly Fonts Bunny Fonts is an open-source, privacy-first web font platform designed to put privacy back into the internet. With a zero-tracking and no-logging policy, Bunny Fonts helps you stay fully GDPR compliant and puts your user's personal data into their own hands. Additionally, you can enjoy lightning-fast load times thanks to bunny.net's global CDN network to help improve SEO and deliver a better user experience.","title":"Variuos resources"},{"location":"00Resources/#readinginfo","text":"Five books to read for software engineer The Passionate Programmer: Creating a Remarkable Career in Software Development The Pragmatic Programmer - your journey to mastery(20th Anniversary Edition) Unwritten Laws of Engineering - Second Edition Remote: Office Not Required Explain the Cloud Like I\u2019m 10 How To Learn Stuff Quickly It's often said that the internet has democratized education: the sum of human knowledge is only a Google search away! And yet, having access to information is only half of the story; you also need to be able to convert raw information into usable skills. For a lot of us, the gap between the two can lead to things like tutorial hell\u2014getting stuck doing tutorial after tutorial without ever feeling like you're making substantive progress. How to Go From Coding Tutorials to Building Apps in 5 Steps - DEV Community Useful Resources To Learn Web Development & To Create Your Website Tips You Should know for Visual Studio Code - VSCode Learning Tips for Programmers \u00b7 We Learn Code 7 Useful VS Code extension for junior web developers - DEV Community Self tought Software Engineer thoughts on learning 4 Books that are not about computers that made me a good Software Developer Everything You Need to Know About Forming a Professional Support Network - CodeNewbie Community 17 Website Templates HTML Free Download - DEV Community","title":"Reading/Info"},{"location":"01HTML/","text":"HTML General information HTML Semantic Elements How to Section Your HTML - CSS-Tricks - practical guide to semantic HTML A short guide to help you pick the correct HTML tag Conquering Responsive Layouts Start creating responsive layouts with confidence! Jump in on this 21-day FREE challenge, put the time in, and you will walk out understanding how you can make a responsive layouts. 10 Helpful Native Web APIs Every New JavaScript Developer Should Know Those HTML Attributes You Never Use \u2014 Smashing Magazine Accessibility Accessibility 101","title":"HTML"},{"location":"01HTML/#html","text":"","title":"HTML"},{"location":"01HTML/#general-information","text":"HTML Semantic Elements How to Section Your HTML - CSS-Tricks - practical guide to semantic HTML A short guide to help you pick the correct HTML tag Conquering Responsive Layouts Start creating responsive layouts with confidence! Jump in on this 21-day FREE challenge, put the time in, and you will walk out understanding how you can make a responsive layouts. 10 Helpful Native Web APIs Every New JavaScript Developer Should Know Those HTML Attributes You Never Use \u2014 Smashing Magazine","title":"General information"},{"location":"01HTML/#accessibility","text":"Accessibility 101","title":"Accessibility"},{"location":"02CSS/","text":"CSS Learn CSS Grid with Wes Bos in 25 pretty good videos Smart CSS Solutions For Common UI Challenges \u2014 Smashing Magazine Writing CSS has probably never been more fun and exciting than it is today. In this post we\u2019ll take a look at common problems and use cases we all have to face in our work and how to solve them with modern CSS. If you\u2019re interested, we\u2019ve also just recently covered CSS auditing tools, CSS generators, front-end boilerplates and VS code extensions \u2014 you might find them useful, too. Extensive CSS guide What do I need to read to be a great at CSS? Designing shadows in CSS CSS hide scrollbars The Complete Guide to Centering in CSS | Modern CSS Solutions Responsive header in Tailwind CSS A Complete Guide to Flexbox by CSS-tricks flex-box manual How to select correct font size Everything about the gaps CSS conditional border radius CSS Units Guide, everything you need to know Native CSS nesting: What you need to know CSS pseudoelements and pseudoclasses Get Comfortable With CSS Selectors Scrollable div layout with height 100% CSS tips on Images you need to know CSS Tools Useful CSS tools and resources to boost your productivity Utopia - fluid responsive design Minimal snippets for modern CSS layouts and components Frameworks Minimal CSS Framework for semantic HTML","title":"CSS"},{"location":"02CSS/#css","text":"Learn CSS Grid with Wes Bos in 25 pretty good videos Smart CSS Solutions For Common UI Challenges \u2014 Smashing Magazine Writing CSS has probably never been more fun and exciting than it is today. In this post we\u2019ll take a look at common problems and use cases we all have to face in our work and how to solve them with modern CSS. If you\u2019re interested, we\u2019ve also just recently covered CSS auditing tools, CSS generators, front-end boilerplates and VS code extensions \u2014 you might find them useful, too. Extensive CSS guide What do I need to read to be a great at CSS? Designing shadows in CSS CSS hide scrollbars The Complete Guide to Centering in CSS | Modern CSS Solutions Responsive header in Tailwind CSS A Complete Guide to Flexbox by CSS-tricks flex-box manual How to select correct font size Everything about the gaps CSS conditional border radius CSS Units Guide, everything you need to know Native CSS nesting: What you need to know CSS pseudoelements and pseudoclasses Get Comfortable With CSS Selectors Scrollable div layout with height 100% CSS tips on Images you need to know","title":"CSS"},{"location":"02CSS/#css-tools","text":"Useful CSS tools and resources to boost your productivity Utopia - fluid responsive design Minimal snippets for modern CSS layouts and components","title":"CSS Tools"},{"location":"02CSS/#frameworks","text":"Minimal CSS Framework for semantic HTML","title":"Frameworks"},{"location":"03JavaScript/","text":"JavaScript/ES6 Usefull tools JavaScript Booster - VSCode extension This VS Code extension provides various code actions (quick fixes) when editing code in JavaScript (or TypeScript/Flow). Just note the light bulb at the left and press it to learn how you can transform the code under the cursor. Vanilla JavaScript Eloquent JavaScript 3rd edition (2018) Jasmine Documentation Jasmine is a behavior-driven development framework for testing JavaScript code. It does not depend on any other JavaScript frameworks. It does not require a DOM. And it has a clean, obvious syntax so that you can easily write tests. JavaScript 30 \u2014 Build 30 things with vanilla JS in 30 days with 30 tutorials JavaScript Modules \u2013 A Beginner's Guide JavaScript Fetch API ES6 Handbook: Everything You Need to Know What is localStorage? - DEV Community JavaScript modules 8 JavaScript Tips & Tricks That No One Teaches + Giveaway - DEV Community 8 Useful JavaScript ES2019 Features to Know About - DEV Community Algorithms and data structures implemented in JavaScript with explanations and links to further readings JavaScript map function: Everything you need to know> How to get the most out of the JavaScript console A deep dive into Javascript Object properties - DEV Community Here is a list of javascript operator and how to use it! Slice and Splice JavaScript Arrays Like a Pro JavaScript Reduce Method Made Simple How can you check if something is an array? TypeScript TypeScript in a Weekend: A Crash Course TypeScript Documentation React The Beginner's Guide to React","title":"JavaScript/ES6"},{"location":"03JavaScript/#javascriptes6","text":"","title":"JavaScript/ES6"},{"location":"03JavaScript/#usefull-tools","text":"JavaScript Booster - VSCode extension This VS Code extension provides various code actions (quick fixes) when editing code in JavaScript (or TypeScript/Flow). Just note the light bulb at the left and press it to learn how you can transform the code under the cursor.","title":"Usefull tools"},{"location":"03JavaScript/#vanilla-javascript","text":"Eloquent JavaScript 3rd edition (2018) Jasmine Documentation Jasmine is a behavior-driven development framework for testing JavaScript code. It does not depend on any other JavaScript frameworks. It does not require a DOM. And it has a clean, obvious syntax so that you can easily write tests. JavaScript 30 \u2014 Build 30 things with vanilla JS in 30 days with 30 tutorials JavaScript Modules \u2013 A Beginner's Guide JavaScript Fetch API ES6 Handbook: Everything You Need to Know What is localStorage? - DEV Community JavaScript modules 8 JavaScript Tips & Tricks That No One Teaches + Giveaway - DEV Community 8 Useful JavaScript ES2019 Features to Know About - DEV Community Algorithms and data structures implemented in JavaScript with explanations and links to further readings JavaScript map function: Everything you need to know> How to get the most out of the JavaScript console A deep dive into Javascript Object properties - DEV Community Here is a list of javascript operator and how to use it! Slice and Splice JavaScript Arrays Like a Pro JavaScript Reduce Method Made Simple How can you check if something is an array?","title":"Vanilla JavaScript"},{"location":"03JavaScript/#typescript","text":"TypeScript in a Weekend: A Crash Course TypeScript Documentation","title":"TypeScript"},{"location":"03JavaScript/#react","text":"The Beginner's Guide to React","title":"React"},{"location":"Courses/","text":"Courses Online Learning: A Bachelor's Level Computer Science Program Curriculum (Updated - Dec 2020) Teach Yourself Computer Science If you\u2019re a self-taught engineer or bootcamp grad, you owe it to yourself to learn computer science. Thankfully, you can give yourself a world-class CS education without investing years and a small fortune in a degree program. There are plenty of resources out there, but some are better than others. You don\u2019t need yet another \u201c200+ Free Online Courses\u201d listicle. You need answers to these questions: Which subjects should you learn, and why? What is the best book or video lecture series for each subject? This guide is our attempt to definitively answer these questions. Web-Dev-For-Beginners: 24 Lessons, 12 Weeks, Get Started as a Web Developer 24 Lessons, 12 Weeks, Get Started as a Web Developer Full stack open 2021 This course serves as an introduction to modern web application development with JavaScript. The main focus is on building single page applications with ReactJS that use REST APIs built with Node.js. The course also contains a section on GraphQL, a modern alternative to REST APIs. The course covers testing, configuration and environment management, and the use of MongoDB for storing the application\u2019s data. ReallyConfused Explore roadmaps on how to break into tech careers using self-study. Understand what courses to take, books to read, projects to build, how to network, and how much money you need to spend to get a job in tech. Then build your own roadmap and crush those long-term goals! FreeCodeCamp Learn to Code \u2014 For Free \u2014 Coding Courses for Busy People. Learn FullStack at your own pace. The Odin Project Your Career in Web Development Starts Here: learn Foundations, Ruby on Rails FullStack or JavaScript FullStack. Community supported free learning paths. Project Euler Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Although mathematics will help you arrive at elegant and efficient methods, the use of a computer and programming skills will be required to solve most problems. JetBrains Academy: Frontend Dev track (free) Do you want to create your own websites or web applications? Choose this track to learn the most popular development tool suite among programmers around the world. We will cover the basics of JavaScript, HTML, and CSS to discover the power of modern Frontend development. Codeamigo - free courses, ispired by rejection from Codecademy . Webapps for Beginners Ruby Monday Study Group curriculum for intermediates This book has been written after we have run 4 beginners groups at our Ruby Monstas groups in Berlin, which then turn into intermediate groups. It outlines the current state of our intermediate group curriculum. After completing this curriculum you\u2019ll have a basic understanding how browsers talk to web applications, and how web applications respond. You\u2019ll be able to generate dynamic web pages, and build simple web applications. FOSS Academy 15 free Python courses for beginners","title":"Courses"},{"location":"Courses/#courses","text":"Online Learning: A Bachelor's Level Computer Science Program Curriculum (Updated - Dec 2020) Teach Yourself Computer Science If you\u2019re a self-taught engineer or bootcamp grad, you owe it to yourself to learn computer science. Thankfully, you can give yourself a world-class CS education without investing years and a small fortune in a degree program. There are plenty of resources out there, but some are better than others. You don\u2019t need yet another \u201c200+ Free Online Courses\u201d listicle. You need answers to these questions: Which subjects should you learn, and why? What is the best book or video lecture series for each subject? This guide is our attempt to definitively answer these questions. Web-Dev-For-Beginners: 24 Lessons, 12 Weeks, Get Started as a Web Developer 24 Lessons, 12 Weeks, Get Started as a Web Developer Full stack open 2021 This course serves as an introduction to modern web application development with JavaScript. The main focus is on building single page applications with ReactJS that use REST APIs built with Node.js. The course also contains a section on GraphQL, a modern alternative to REST APIs. The course covers testing, configuration and environment management, and the use of MongoDB for storing the application\u2019s data. ReallyConfused Explore roadmaps on how to break into tech careers using self-study. Understand what courses to take, books to read, projects to build, how to network, and how much money you need to spend to get a job in tech. Then build your own roadmap and crush those long-term goals! FreeCodeCamp Learn to Code \u2014 For Free \u2014 Coding Courses for Busy People. Learn FullStack at your own pace. The Odin Project Your Career in Web Development Starts Here: learn Foundations, Ruby on Rails FullStack or JavaScript FullStack. Community supported free learning paths. Project Euler Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Although mathematics will help you arrive at elegant and efficient methods, the use of a computer and programming skills will be required to solve most problems. JetBrains Academy: Frontend Dev track (free) Do you want to create your own websites or web applications? Choose this track to learn the most popular development tool suite among programmers around the world. We will cover the basics of JavaScript, HTML, and CSS to discover the power of modern Frontend development. Codeamigo - free courses, ispired by rejection from Codecademy . Webapps for Beginners Ruby Monday Study Group curriculum for intermediates This book has been written after we have run 4 beginners groups at our Ruby Monstas groups in Berlin, which then turn into intermediate groups. It outlines the current state of our intermediate group curriculum. After completing this curriculum you\u2019ll have a basic understanding how browsers talk to web applications, and how web applications respond. You\u2019ll be able to generate dynamic web pages, and build simple web applications. FOSS Academy 15 free Python courses for beginners","title":"Courses"},{"location":"Docker/","text":"Docker Using Docker in development the right way - DEV Community","title":"Docker"},{"location":"Docker/#docker","text":"Using Docker in development the right way - DEV Community","title":"Docker"},{"location":"Git/","text":"git Some lifesaving git commands and what's happening under the hud when executed Oh Shit, Git!?! Git is hard: screwing up is easy, and figuring out how to fix your mistakes is fucking impossible. Git documentation has this chicken and egg problem where you can't search for how to get yourself out of a mess, unless you already know the name of the thing you need to know about in order to fix your problem. Git Explorer : Git Command Explorer. Find the right commands you need without digging through the web. Basic git commands git flight rules - extensive git curriculum reserved location of git flight rules A (Very) Simple Git Workflow GitSheet - my git cheatsheet - DEV git command ecplained with cats - easy git guide for beginners Advantages of Git-flow over standard git commands - DEV git - the simple guide - no deep shit How to make a good git commit Rewriting git history (amend/rebase) Git rebase tutorial. Rebase vs Merge - video How to undo a push or merge in Git branch | Level Up Coding How to undo a push or merge with Git?","title":"git"},{"location":"Git/#git","text":"Some lifesaving git commands and what's happening under the hud when executed Oh Shit, Git!?! Git is hard: screwing up is easy, and figuring out how to fix your mistakes is fucking impossible. Git documentation has this chicken and egg problem where you can't search for how to get yourself out of a mess, unless you already know the name of the thing you need to know about in order to fix your problem. Git Explorer : Git Command Explorer. Find the right commands you need without digging through the web. Basic git commands git flight rules - extensive git curriculum reserved location of git flight rules A (Very) Simple Git Workflow GitSheet - my git cheatsheet - DEV git command ecplained with cats - easy git guide for beginners Advantages of Git-flow over standard git commands - DEV git - the simple guide - no deep shit How to make a good git commit Rewriting git history (amend/rebase) Git rebase tutorial. Rebase vs Merge - video How to undo a push or merge in Git branch | Level Up Coding How to undo a push or merge with Git?","title":"git"},{"location":"Practice/","text":"Tasks/Practice Exercism Develop fluency in 55 programming languages with our unique blend of learning, practice and mentoring. Exercism is fun, effective and 100% free, forever. 7 Graphical User Interfaces 7GUIs is a programming benchmark to compare implementations in terms of their notation. 7GUIs defines 7 tasks that represent typical challenges in GUI programming. This site implements the 7 tasks using vanilla HTML, CSS & JavaScript. Click a link below to see a description of a task, the rendered GUI & links to its code. Frontend Mentor | Front-end coding challenges using a real-life workflow Solve real-world HTML, CSS and JavaScript challenges whilst working to professional designs. Join 234,822 developers building projects, reviewing code, and helping each other get better. Learn CSS by playing games Learn Linux commands by playing a simple text adventure","title":"Tasks/Practice"},{"location":"Practice/#taskspractice","text":"Exercism Develop fluency in 55 programming languages with our unique blend of learning, practice and mentoring. Exercism is fun, effective and 100% free, forever. 7 Graphical User Interfaces 7GUIs is a programming benchmark to compare implementations in terms of their notation. 7GUIs defines 7 tasks that represent typical challenges in GUI programming. This site implements the 7 tasks using vanilla HTML, CSS & JavaScript. Click a link below to see a description of a task, the rendered GUI & links to its code. Frontend Mentor | Front-end coding challenges using a real-life workflow Solve real-world HTML, CSS and JavaScript challenges whilst working to professional designs. Join 234,822 developers building projects, reviewing code, and helping each other get better. Learn CSS by playing games Learn Linux commands by playing a simple text adventure","title":"Tasks/Practice"},{"location":"Python/","text":"Python Django Admin Cookbook Six things to do every time I start a Django project Setting up the Python environment How To Use a .env File With Python Python Best Practices for a New Project in 2021 Date and time localization methods in Python GitHub - trekhleb/learn-python : Playground and cheatsheet for learning Python. Collection of Python scripts that are split by topics and contain code examples with explanations. Learn Python from scratch Free OpenSource interactive online course. Do Python One-Liners Make Your Code Faster? - YES They Do! Implementing RSA in Python from Scratch (Part 1) Learn Python ASTs, by building your own linter Python args and kwargs: Demystified Python programs, usually short, of considerable difficulty, to perfect particular skills. \"An \u00e9tude (a French word meaning study) is an instrumental musical composition, usually short, of considerable difficulty, and designed to provide practice material for perfecting a particular musical skill.\" \u2014 Wikipedia This project contains pytudes\u2014Python programs, usually short, for perfecting particular programming skills. CheatSheets Python code examples Comprehensive Python Cheatsheet Python For Data Science - A Cheat Sheet For Beginners Pandas Cheat Sheet for Data Science in Python NumPy Cheat Sheet: Data Analysis in Python Matplotlib Cheat Sheet: Plotting in Python","title":"Python"},{"location":"Python/#python","text":"Django Admin Cookbook Six things to do every time I start a Django project Setting up the Python environment How To Use a .env File With Python Python Best Practices for a New Project in 2021 Date and time localization methods in Python GitHub - trekhleb/learn-python : Playground and cheatsheet for learning Python. Collection of Python scripts that are split by topics and contain code examples with explanations. Learn Python from scratch Free OpenSource interactive online course. Do Python One-Liners Make Your Code Faster? - YES They Do! Implementing RSA in Python from Scratch (Part 1) Learn Python ASTs, by building your own linter Python args and kwargs: Demystified Python programs, usually short, of considerable difficulty, to perfect particular skills. \"An \u00e9tude (a French word meaning study) is an instrumental musical composition, usually short, of considerable difficulty, and designed to provide practice material for perfecting a particular musical skill.\" \u2014 Wikipedia This project contains pytudes\u2014Python programs, usually short, for perfecting particular programming skills.","title":"Python"},{"location":"Python/#cheatsheets","text":"Python code examples Comprehensive Python Cheatsheet Python For Data Science - A Cheat Sheet For Beginners Pandas Cheat Sheet for Data Science in Python NumPy Cheat Sheet: Data Analysis in Python Matplotlib Cheat Sheet: Plotting in Python","title":"CheatSheets"},{"location":"ReusableElements/","text":"Reusable Elements 25+ Creative CSS Divider Examples With Tutorials (Code Snippets) & Previews 2021 CSS templates/boilerplate FlowBite Open-source collection of UI elements based on the utility-first CSS framework Tailwind designed and coded by Themesberg available in Figma and as web components.","title":"Reusable Elements"},{"location":"ReusableElements/#reusable-elements","text":"25+ Creative CSS Divider Examples With Tutorials (Code Snippets) & Previews 2021","title":"Reusable Elements"},{"location":"ReusableElements/#css-templatesboilerplate","text":"FlowBite Open-source collection of UI elements based on the utility-first CSS framework Tailwind designed and coded by Themesberg available in Figma and as web components.","title":"CSS templates/boilerplate"},{"location":"RubyRails/","text":"Ruby / Ruby on Rails FREE resources to help you get started in just under 6 hours... I Love Ruby: Get started with the greatest programming language made for humans. 10 things to add to every Rails app Tailwind CSS; Authentication (Devise); Email systems: Letter opener Postmark Admin systems - administrate ; Tests; Rubocop; Sentry; Sidekiq; Metamagic; Rack attack. A Brief Overview of Rails Generators How to debug interactions between your code and the Rails framework (and other gems) Rails Wizards","title":"Ruby / Ruby on Rails"},{"location":"RubyRails/#ruby-ruby-on-rails","text":"FREE resources to help you get started in just under 6 hours... I Love Ruby: Get started with the greatest programming language made for humans. 10 things to add to every Rails app Tailwind CSS; Authentication (Devise); Email systems: Letter opener Postmark Admin systems - administrate ; Tests; Rubocop; Sentry; Sidekiq; Metamagic; Rack attack. A Brief Overview of Rails Generators How to debug interactions between your code and the Rails framework (and other gems) Rails Wizards","title":"Ruby / Ruby on Rails"},{"location":"Tools/","text":"Tools and Utilities Generate random user profile pictures and names Generate random user profile pictures and names to use them as placeholders for your prototypes and design projects #HEXWORDS Why bother with a random green when you can choose to be a #BADA55! HTML to MarkDown Converter (and more) Best Online Tools | 10015 Tools Build anything online with \u201call-in-one toolbox\u201d. All tools are easy-to-use, blazing fast & free. Interactive CSS Grid Generator | Layoutit Grid Carbon | Create and share beautiful images of your source code 7 Awesome Ways to Screenshot Your Code","title":"Tools and Utilities"},{"location":"Tools/#tools-and-utilities","text":"Generate random user profile pictures and names Generate random user profile pictures and names to use them as placeholders for your prototypes and design projects #HEXWORDS Why bother with a random green when you can choose to be a #BADA55! HTML to MarkDown Converter (and more) Best Online Tools | 10015 Tools Build anything online with \u201call-in-one toolbox\u201d. All tools are easy-to-use, blazing fast & free. Interactive CSS Grid Generator | Layoutit Grid Carbon | Create and share beautiful images of your source code 7 Awesome Ways to Screenshot Your Code","title":"Tools and Utilities"},{"location":"UsefullScripts/","text":"bash/shell bashcrawl Learn Linux commands by playing a simple text adventure. Effective Shell This book is for anyone who is interested in computing, and wants to learn more about the exciting, but sometimes daunting world of The Shell. The shell is simple interface for working with computers and programs and learning some of its features can enormously increase your productivity as any computer user - whether a home user or hobbyist, programmer, data scientist, writer, administrator or other professional. For the newcomer, you'll learn what a shell is, how to use it on your system, and then how to become more effective everyday by integrating the shell into your work. For the experienced professional, there is a wealth of detailed tips and tricks in each chapter that go into advanced topics and techniques to make you even more of a power user. Scripts & Commands Writing a bash scripts like a pro Resize multiple graphic files from the command line: sudo apt-get install imagemagick mogrify -resize 640 *.jpg Convert large jpg/png files into webp: sudo apt-get install webp cd /mywebapp/static/img/ mkdir webp for file in *. { jpg,png,jpeg } ; do cwebp -q 60 ${ file } -o webp/ ${ file } .webp ; done ; Linux commands for optimizing web images Linux commands for advanced hardware info source Sometimes you need info about hardware, and you probably lost your invoice, spec list or a password to a store website. Maybe you did an upgrade and this info isn't accurate anymore. It's an easy case for home users, but what to do is you have many machines in a corporate environment? The commands below will also be useful for hardware debug. Uname - Linux kernel info uname -a - kernel version uname -m - system architecture lspci - list of all attached devices to PCI bus lspci -vvv - enable verbose mode. # lspci 00:00.0 Host bridge: Intel Corporation 5500 I/O Hub to ESI Port (rev 13) 00:01.0 PCI bridge: Intel Corporation 5520/5500/X58 I/O Hub PCI Express Root Port 1 (rev 13) 00:09.0 PCI bridge: Intel Corporation 7500/5520/5500/X58 I/O Hub PCI Express Root Port 9 (rev 13) lshw - complete all in one list of installed hardware components lshw works without sudo , but provides much less info. Includes memory configuration, firmware revisions, CPU info and core frequencies. --sanitize flag is super useful when you want to upload result to the internet, it will hide IP addresses and serial numbers, --short flag is good for compact output. Report in HTML is very helpful for easy sharing: $ sudo lshw \u2013html > report.html hwinfo - another tool, very similar to lshw Hwinfo , created by SUSE developers, is another general purpose hardware probing utility capable off reporting detailed and brief information about multiple different hardware components. Examples: $ hwinfo $ hwinfo \u2013short dmidecode -extract info from BIOS/UEFI using SMBIOS API. --type option for device-related info like bios,system,chassis Examples: $ sudo dmidecode -t processor $ sudo dmidecode -t memory lsusb - perfect command to show all pluggable devices Useful flags: -vvv for verbose mode, -s [bus]:[devnum] will show only specific device on you need to watch. You can easily sort by vendor with -d [vendor]:[product] , view all in three modes with -t and use device-file config with -S /dev/X option. $ lsusb Bus 005 Device 002: ID 045e:00cb Microsoft Corp. Basic Optical Mouse v2.0 Bus 005 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub lscpu - first command to get CPU info Verbose mode can be enabled with -e flag, -p also very useful for better formatting. --online and --offline can be specified for better visualization. lsscsi - print attacked SCSI devices into \"Old bud gold\" SCSI drives used mostly in enterprise, more costly than PCI & SATA devices. Verbose mode can be enabled with -L , -l and -v options. $ lsscsi [3:0:0:0] disk ATA ST3500418AS CC38 /dev/sda [4:0:0:0] cd/dvd SONY DVD RW DRU-190A 1.63 /dev/sr0 dmesg - kernel logs Kernel logs are very helpful for hardware events like attach, detach, shutdown etc. Works much better with grep and less commands: sudo dmesg | grep -i audio | less . inxi - \"all in one\" script The crazy, bigger than 10k lines of code, bash script, capable to fetch multiple system APIs and provide gigantic pile of info. Useful flags: -z to hide sensitive info if you wanna upload reports to internet, -F for verbose mode, -A for audio information, -m - memory, - -i - networking, -p - disk info, all options you can check in help menu which can be invoked by -H . fdisk , gdisk and parted - all about your drive partitions Why are there three commands here, you want to ask? Well, they are doing very similar jobs and completely independent projects. gdisk was a fdisk fork with GTP partitioning mode support; now fdisk supports GPT too. Covering their options will take several posts like this, but here's how to check your drive info: $ fdisk -l or gdisk -l or parted -l . blkid and lsblk - block devices list These commands shows info about available block devices. Examples below: $ lsblk -a NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS sda 8:0 0 232.9G 0 disk \u251c\u2500sda1 8:1 0 200M 0 part # blkid -i /dev/sda /dev/sda: MINIMUM_IO_SIZE=\"512\" PHYSICAL_SECTOR_SIZE=\"512\" LOGICAL_SECTOR_SIZE=\"512\" mount - mount a drive and print info about already mounted $ mount | column -t for better visualization, sudo mount /dev/sdaN /media/data - mount a partition. $ mount | column -t /dev/sda2 on / type ext4 (rw,relatime,stripe=256) devtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=5827492k,nr_inodes=1456873,mode=755,inode64) df - check used and free disk space Useful flag: df -H - human-readable output. /proc - virtual file system full of hardware/software related info and configuration /prop/cpuinfo - CPU specs /proc/version - kernel version /proc/partitions - partitions info hdparm - get/set SATA/IDE device parameters Available by default in most of Linux distribution for many years, very useful for advanced configuration. $ hdparm -g - display drive geometry $ hdparm -tT /dev/sdN - partition reading & writing benchmark","title":"bash/shell"},{"location":"UsefullScripts/#bashshell","text":"bashcrawl Learn Linux commands by playing a simple text adventure. Effective Shell This book is for anyone who is interested in computing, and wants to learn more about the exciting, but sometimes daunting world of The Shell. The shell is simple interface for working with computers and programs and learning some of its features can enormously increase your productivity as any computer user - whether a home user or hobbyist, programmer, data scientist, writer, administrator or other professional. For the newcomer, you'll learn what a shell is, how to use it on your system, and then how to become more effective everyday by integrating the shell into your work. For the experienced professional, there is a wealth of detailed tips and tricks in each chapter that go into advanced topics and techniques to make you even more of a power user.","title":"bash/shell"},{"location":"UsefullScripts/#scripts-commands","text":"Writing a bash scripts like a pro Resize multiple graphic files from the command line: sudo apt-get install imagemagick mogrify -resize 640 *.jpg Convert large jpg/png files into webp: sudo apt-get install webp cd /mywebapp/static/img/ mkdir webp for file in *. { jpg,png,jpeg } ; do cwebp -q 60 ${ file } -o webp/ ${ file } .webp ; done ; Linux commands for optimizing web images","title":"Scripts &amp; Commands"},{"location":"UsefullScripts/#linux-commands-for-advanced-hardware-info","text":"source Sometimes you need info about hardware, and you probably lost your invoice, spec list or a password to a store website. Maybe you did an upgrade and this info isn't accurate anymore. It's an easy case for home users, but what to do is you have many machines in a corporate environment? The commands below will also be useful for hardware debug.","title":"Linux commands for advanced hardware info"},{"location":"UsefullScripts/#uname-linux-kernel-info","text":"uname -a - kernel version uname -m - system architecture","title":"Uname - Linux kernel info"},{"location":"UsefullScripts/#lspci-list-of-all-attached-devices-to-pci-bus","text":"lspci -vvv - enable verbose mode. # lspci 00:00.0 Host bridge: Intel Corporation 5500 I/O Hub to ESI Port (rev 13) 00:01.0 PCI bridge: Intel Corporation 5520/5500/X58 I/O Hub PCI Express Root Port 1 (rev 13) 00:09.0 PCI bridge: Intel Corporation 7500/5520/5500/X58 I/O Hub PCI Express Root Port 9 (rev 13)","title":"lspci - list of all attached devices to PCI bus"},{"location":"UsefullScripts/#lshw-complete-all-in-one-list-of-installed-hardware-components","text":"lshw works without sudo , but provides much less info. Includes memory configuration, firmware revisions, CPU info and core frequencies. --sanitize flag is super useful when you want to upload result to the internet, it will hide IP addresses and serial numbers, --short flag is good for compact output. Report in HTML is very helpful for easy sharing: $ sudo lshw \u2013html > report.html","title":"lshw - complete all in one list of installed hardware components"},{"location":"UsefullScripts/#hwinfo-another-tool-very-similar-to-lshw","text":"Hwinfo , created by SUSE developers, is another general purpose hardware probing utility capable off reporting detailed and brief information about multiple different hardware components. Examples: $ hwinfo $ hwinfo \u2013short","title":"hwinfo - another tool, very similar to lshw"},{"location":"UsefullScripts/#dmidecode-extract-info-from-biosuefi-using-smbios-api","text":"--type option for device-related info like bios,system,chassis Examples: $ sudo dmidecode -t processor $ sudo dmidecode -t memory","title":"dmidecode -extract info from BIOS/UEFI using SMBIOS API."},{"location":"UsefullScripts/#lsusb-perfect-command-to-show-all-pluggable-devices","text":"Useful flags: -vvv for verbose mode, -s [bus]:[devnum] will show only specific device on you need to watch. You can easily sort by vendor with -d [vendor]:[product] , view all in three modes with -t and use device-file config with -S /dev/X option. $ lsusb Bus 005 Device 002: ID 045e:00cb Microsoft Corp. Basic Optical Mouse v2.0 Bus 005 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub","title":"lsusb - perfect command to show all pluggable devices"},{"location":"UsefullScripts/#lscpu-first-command-to-get-cpu-info","text":"Verbose mode can be enabled with -e flag, -p also very useful for better formatting. --online and --offline can be specified for better visualization.","title":"lscpu - first command to get CPU info"},{"location":"UsefullScripts/#lsscsi-print-attacked-scsi-devices-into","text":"\"Old bud gold\" SCSI drives used mostly in enterprise, more costly than PCI & SATA devices. Verbose mode can be enabled with -L , -l and -v options. $ lsscsi [3:0:0:0] disk ATA ST3500418AS CC38 /dev/sda [4:0:0:0] cd/dvd SONY DVD RW DRU-190A 1.63 /dev/sr0","title":"lsscsi - print attacked SCSI devices into"},{"location":"UsefullScripts/#dmesg-kernel-logs","text":"Kernel logs are very helpful for hardware events like attach, detach, shutdown etc. Works much better with grep and less commands: sudo dmesg | grep -i audio | less .","title":"dmesg - kernel logs"},{"location":"UsefullScripts/#inxi-all-in-one-script","text":"The crazy, bigger than 10k lines of code, bash script, capable to fetch multiple system APIs and provide gigantic pile of info. Useful flags: -z to hide sensitive info if you wanna upload reports to internet, -F for verbose mode, -A for audio information, -m - memory, - -i - networking, -p - disk info, all options you can check in help menu which can be invoked by -H .","title":"inxi - \"all in one\" script"},{"location":"UsefullScripts/#fdisk-gdisk-and-parted-all-about-your-drive-partitions","text":"Why are there three commands here, you want to ask? Well, they are doing very similar jobs and completely independent projects. gdisk was a fdisk fork with GTP partitioning mode support; now fdisk supports GPT too. Covering their options will take several posts like this, but here's how to check your drive info: $ fdisk -l or gdisk -l or parted -l .","title":"fdisk, gdisk and parted - all about your drive partitions"},{"location":"UsefullScripts/#blkid-and-lsblk-block-devices-list","text":"These commands shows info about available block devices. Examples below: $ lsblk -a NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS sda 8:0 0 232.9G 0 disk \u251c\u2500sda1 8:1 0 200M 0 part # blkid -i /dev/sda /dev/sda: MINIMUM_IO_SIZE=\"512\" PHYSICAL_SECTOR_SIZE=\"512\" LOGICAL_SECTOR_SIZE=\"512\"","title":"blkid and lsblk - block devices list"},{"location":"UsefullScripts/#mount-mount-a-drive-and-print-info-about-already-mounted","text":"$ mount | column -t for better visualization, sudo mount /dev/sdaN /media/data - mount a partition. $ mount | column -t /dev/sda2 on / type ext4 (rw,relatime,stripe=256) devtmpfs on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=5827492k,nr_inodes=1456873,mode=755,inode64)","title":"mount - mount a drive and print info about already mounted"},{"location":"UsefullScripts/#df-check-used-and-free-disk-space","text":"Useful flag: df -H - human-readable output.","title":"df - check used and free disk space"},{"location":"UsefullScripts/#proc-virtual-file-system-full-of-hardwaresoftware-related-info-and-configuration","text":"/prop/cpuinfo - CPU specs /proc/version - kernel version /proc/partitions - partitions info","title":"/proc - virtual file system full of hardware/software related info and configuration"},{"location":"UsefullScripts/#hdparm-getset-sataide-device-parameters","text":"Available by default in most of Linux distribution for many years, very useful for advanced configuration. $ hdparm -g - display drive geometry $ hdparm -tT /dev/sdN - partition reading & writing benchmark","title":"hdparm - get/set SATA/IDE device parameters"},{"location":"Videolessons/","text":"Video lessons Web Applications for Everybody - Dr. Chuck Teaches HTML, JavaScript, PHP, SQL, and More - 14 hours video ahead. Make yourself some tea and... Don't panic, Starman! HTML CSS Loops vs recursion Connecting React Frontent to Flask (python) backend Git for Professionals Tutorial - Tools & Concepts for Mastering Version Control with Git - YouTube SQL injection","title":"Video lessons"},{"location":"Videolessons/#video-lessons","text":"Web Applications for Everybody - Dr. Chuck Teaches HTML, JavaScript, PHP, SQL, and More - 14 hours video ahead. Make yourself some tea and... Don't panic, Starman! HTML CSS Loops vs recursion Connecting React Frontent to Flask (python) backend Git for Professionals Tutorial - Tools & Concepts for Mastering Version Control with Git - YouTube SQL injection","title":"Video lessons"},{"location":"books/","text":"Books JavaScript for impatient programmers (ES2021 edition) Code Simplicity: The Fundamentals of Software (Free eBook) \u00bb Code Simplicity About the Book This book contains the fundamental laws of software design\u2014the most important facts about software development that will let you understand what is going to happen with your software system in the future, based on the actions you take now. It gives you principles that you can think with, that will help you understand why and how to keep your systems maintainable, now and forever. It is applicable to all software development, in all languages, on all platforms. 460 Free Textbooks \u2013 Math, Science, and More [Online PDF for College and High School] Python Data Science Handbook","title":"Books"},{"location":"books/#books","text":"JavaScript for impatient programmers (ES2021 edition) Code Simplicity: The Fundamentals of Software (Free eBook) \u00bb Code Simplicity About the Book This book contains the fundamental laws of software design\u2014the most important facts about software development that will let you understand what is going to happen with your software system in the future, based on the actions you take now. It gives you principles that you can think with, that will help you understand why and how to keep your systems maintainable, now and forever. It is applicable to all software development, in all languages, on all platforms. 460 Free Textbooks \u2013 Math, Science, and More [Online PDF for College and High School] Python Data Science Handbook","title":"Books"},{"location":"zhelpedit/","text":"Admin links For full documentation visit mkdocs.org . Theme documentation Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Deploy site to GitHub Pages.","title":"Admin links"},{"location":"zhelpedit/#admin-links","text":"For full documentation visit mkdocs.org . Theme documentation","title":"Admin links"},{"location":"zhelpedit/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Deploy site to GitHub Pages.","title":"Commands"},{"location":"Cheat%20Sheets/JavaScript/","text":"Loops for More on MDN for ( let i = 0 ; i < 5 ; i ++ ) { console . log ( i ); } // OUTPUT: 0 1 2 3 4 for...in More on MDN const arr = [ 3 , 5 , 7 ]; arr . foo = 'hello' ; for ( let i in arr ) { console . log ( i ); } // OUTPUT: \"0\", \"1\", \"2\", \"foo\" for...of More on MDN const arr = [ 3 , 5 , 7 ]; for ( let i of arr ) { console . log ( i ); } // OUTPUT: 3, 5, 7 do...while More on MDN let iterator = 0 ; do { iterator ++ ; console . log ( iterator ); } while ( iterator < 5 ); // OUTPUT: 1 2 3 4 5 while More on MDN let iterator = 0 ; while ( iterator < 5 ) { iterator ++ ; console . log ( iterator ); } // OUTPUT: 1 2 3 4 5 JS ES6 Arrow function const sum = ( a , b ) => a + b console . log ( sum ( 2 , 6 )) // OUTPUT: 8 Default parameters function print ( a = 5 ) { console . log ( a ) } print () // OUTPUT: 5 print ( 22 ) // OUTPUT: 22 Let Scope let a = 3 if ( true ) { let a = 5 console . log ( a ) // OUTPUT: 5 } console . log ( a ) // OUTPUT: 3 Const // can be assigned only once const a = 55 a = 44 // throws an error Multiline string console . log ( ` This is a multiline string ` ) Template strings const name = 'World' ; const message = `Hello ${ name } ` ; console . log ( message ); // OUTPUT: \"Hello World\" Exponent operator const byte = 2 ** 8 // Same as: Math.pow(2, 8) Spread operator const a = [ 1 , 2 ] const b = [ 3 , 4 ] const c = [ ... a , ... b ] console . log ( c ) // OUTPUT: [1, 2, 3, 4] String includes() console . log ( 'apple' . includes ( 'pl' )); // OUTPUT: true console . log ( 'apple' . includes ( 'tt' )); // OUTPUT: false String startsWith() console . log ( 'apple' . startsWith ( 'ap' )); // OUTPUT: true console . log ( 'apple' . startsWith ( 'bb' )); // OUTPUT: false String repeat() console . log ( 'ab' . repeat ( 3 )); // OUTPUT: \"ababab\" Destructuring array let [ a , b ] = [ 3 , 7 ]; console . log ( a ); // 3 console . log ( b ); // 7 Destructuring object let obj = { a : 55 , b : 44 }; let { a , b } = obj ; console . log ( a ); // OUTPUT: 55 console . log ( b ); // OUTPUT: 44 Object property assignment const a = 2 const b = 5 const obj = { a , b } // Before es6: // obj = { a: a, b: b } console . log ( obj ) // OUTPUT: { a: 2, b: 5 } Object function assignment const obj = { a : 5 , b () { console . log ( 'b' ) } } obj . b () // OUTPUT: \"b\" Object.assign() const obj1 = { a : 1 } const obj2 = { b : 2 } const obj3 = Object . assign ({}, obj1 , obj2 ) console . log ( obj3 ) // { a: 1, b: 2 } Object.entries() const obj = { firstName : 'FirstName' , lastName : 'LastName' , age : 24 , country : 'India' , }; const entries = Object . entries ( obj ); /* returns an array of [key, value] pairs of the object passed */ console . log ( entries ); /* prints [ ['firstName', 'FirstName'], ['lastName', 'LastName'], ['age', 24], ['country', 'India'] ]; */ Promises with finally promise . then (( result ) => { \u00b7\u00b7\u00b7 }) . catch (( error ) => { \u00b7\u00b7\u00b7 }) . finally (() => { /* logic independent of success/error */ }) /* The handler is called when the promise is fulflled or rejected.*/ Destructuring Nested Objects const Person = { name : \"Harry Potter\" , age : 29 , sex : \"male\" , materialStatus : \"single\" , address : { country : \"USA\" , state : \"Nevada\" , city : \"Carson City\" , pinCode : \"500014\" , }, }; const { address : { state , pinCode }, name } = Person ; console . log ( name , state , pinCode ) // Harry Potter Nevada 500014 console . log ( city ) // ReferenceError Spread operator const a = { firstName : \"FirstName\" , lastName : \"LastName1\" , } const b = { ... a , lastName : \"LastName2\" , canSing : true , } console . log ( a ) //{firstName: \"FirstName\", lastName: \"LastName1\"} console . log ( b ) /* {firstName: \"FirstName\", lastName: \"LastName2\", canSing: true} */ /* great for modifying objects without side effects/affecting the original */ Arrays destructuring Assigning array items to variables const [ a , b , c ] = [ 123 , 'second' , true ]; // a => 123 // b => 'second' // c => true Skipping items const [, b ] = [ 123 , 'second' , true ]; // b => 'second' Assigning the first values, storing the rest together const [ a , b , ... rest ] = [ 123 , 'second' , true , false , 42 ]; // a => 123 // b => 'second' // rest => [true, false, 42] Swapping variables let x = true ; let y = false ; [ x , y ] = [ y , x ]; // x => false // y => true String methods charAt() More on MDN let txt = 'Hello World' ; console . log ( txt . charAt ( 0 )); // OUTPUT: 'H' concat() More on MDN let str1 = 'Hello ' ; let str2 = 'World' ; console . log ( str1 . concat ( str2 )); // OUTPUT: 'Hello world'; indexOf() More on MDN let txt = 'Lets find where the `pen` is' ; console . log ( txt . indexOf ( 'pen' )); // OUTPUT: 21 replace() More on MDN let str = 'Hello Dev!' console . log ( str . replace ( 'Dev' , 'World' )); // OUTPUT: 'Hello World' search() More on MDN let str = 'Hello dev' ; console . log ( str . search ( 'dev' )); // OUTPUT: 6 slice() More on MDN let str1 = 'The morning is upon us.' , // the length of str1 is 23. str2 = str1 . slice ( 1 , 8 ), str3 = str1 . slice ( 4 , - 2 ), str4 = str1 . slice ( 12 ), str5 = str1 . slice ( 30 ); console . log ( str2 ) // OUTPUT: he morn console . log ( str3 ) // OUTPUT: morning is upon u console . log ( str4 ) // OUTPUT: is upon us. console . log ( str5 ) // OUTPUT: \"\" substring() More on MDN const str = 'Mozilla' ; console . log ( str . substring ( 1 , 3 )); // expected output: \"oz\" console . log ( str . substring ( 2 )); // expected output: \"zilla\" substr() Deprecated. Not for use in new websites. More on MDN const str = 'Mozilla' ; console . log ( str . substr ( 1 , 2 )); // expected output: \"oz\" console . log ( str . substr ( 2 )); // expected output: \"zilla\" Difference between substr() and substring() let text = 'Mozilla' console . log ( text . substring ( 2 , 5 )) // => \"zil\" console . log ( text . substr ( 2 , 3 )) // => \"zil\" toUpperCase() / toLowerCase() toUpperCase() on MDN | toLowerCase() on MDN const sentence = 'The quick brown fox jumps over the lazy dog.' ; console . log ( sentence . toUpperCase ()); // expected output: \"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\" const allcaps = 'HAPPY CAPSLOCK DAY!' ; console . log ( allcaps . toLowerCase ()); // EXPECTED OUTPOOT: \"HAPPY CAPSLOCK DAY!\" valueOf() More on MDN var x = new String ( 'Hello world' ); console . log ( x . valueOf ()); // Displays 'Hello world' trim() Mode on MDN const greeting = ' Hello world! ' ; console . log ( greeting ); // expected output: \" Hello world! \"; console . log ( greeting . trim ()); // expected output: \"Hello world!\"; toString() More on MDN const myNumber = 535 ; console . log ( myNumber . toString ()); // OUTPUT: \"535\"; includes() More on MDN const sentence = 'The quick brown fox jumps over the lazy dog.' ; const word = 'fox' ; console . log ( sentence . includes ( word )); // OUTPUT: true charCodeAt() More on MDN let word = 'TEST' ; console . log ( word . charCodeAt ( 0 )); // OUTPUT: 84 match() More on MDN const paragraph = 'The quick brown fox jumps over the lazy dog. It barked.' ; const found = paragraph . match ( \"th\" ); console . log ( found ); // OUTPUT: [\"th\"] split() More on MDN const str = 'The quick brown fox jumps over the lazy dog.' ; const words = str . split ( ' ' ); console . log ( words [ 3 ]); // expected output: \"fox\" JavaScript Async/Await Async When we append the keyword async to the function , this function returns the Promise by default on execution. Async keyword provides extra information to the user of the function: The function contains some Asynchronous Execution The returned value will be the Resolved Value for the Promise async function f () { return 1 ; } f (). then ( alert ); // OUTPUT: 1 Await The keyword await makes JavaScript wait until that promise settles and returns its result The await works only inside async functions async function f () { let promise = new Promise (( resolve , reject ) => { setTimeout (() => resolve ( \"done!\" ), 1000 ) }); let result = await promise ; // wait until the promise resolves alert ( result ); // OUTPUT: \"done!\" } f (); API calls XML HTTP Request All modern browsers support the XMLHttpRequest object to request data from a server. It works on the oldest browsers as well as on new ones. It was deprecated in ES6 but is still widely used. var request = new XMLHttpRequest (); request . open ( 'GET' , 'https://jsonplaceholder.typicode.com/todos' ) request . send (); request . onload = () => { console . log ( JSON . parse ( request . response )); } Fetch The Fetch API provides an interface for fetching resources (including across the network) in an asynchronous manner. It returns a Promise It is an object which contains a single value either a Response or an Error that occurred. .then() tells the program what to do once Promise is completed. fetch ( 'https://jsonplaceholder.typicode.com/todos' ). then ( response => { return response . json (); }). then ( data => { console . log ( data ); }) Axios It is an open-source library for making HTTP requests. It works on both Browsers and Node.js It can be included in an HTML file by using an external CDN It also returns promises like fetch API < script src = \"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\" >< /script> axios . get ( \"https://jsonplaceholder.typicode.com/todos\" ) . then ( response =>{ console . log ( response . data ) }) jQuery AJAX It performs asynchronous HTTP requests. Uses $.ajax() method to make the requests. < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\" > < /script> $ ( document ). ready ( function (){ $ . ajax ({ url : \"https://jsonplaceholder.typicode.com/todos\" , type : \"GET\" , success : function ( result ){ console . log ( result ); } }) })","title":"JavaScript"},{"location":"Cheat%20Sheets/JavaScript/#loops","text":"","title":"Loops"},{"location":"Cheat%20Sheets/JavaScript/#for","text":"More on MDN for ( let i = 0 ; i < 5 ; i ++ ) { console . log ( i ); } // OUTPUT: 0 1 2 3 4","title":"for"},{"location":"Cheat%20Sheets/JavaScript/#forin","text":"More on MDN const arr = [ 3 , 5 , 7 ]; arr . foo = 'hello' ; for ( let i in arr ) { console . log ( i ); } // OUTPUT: \"0\", \"1\", \"2\", \"foo\"","title":"for...in"},{"location":"Cheat%20Sheets/JavaScript/#forof","text":"More on MDN const arr = [ 3 , 5 , 7 ]; for ( let i of arr ) { console . log ( i ); } // OUTPUT: 3, 5, 7","title":"for...of"},{"location":"Cheat%20Sheets/JavaScript/#dowhile","text":"More on MDN let iterator = 0 ; do { iterator ++ ; console . log ( iterator ); } while ( iterator < 5 ); // OUTPUT: 1 2 3 4 5","title":"do...while"},{"location":"Cheat%20Sheets/JavaScript/#while","text":"More on MDN let iterator = 0 ; while ( iterator < 5 ) { iterator ++ ; console . log ( iterator ); } // OUTPUT: 1 2 3 4 5","title":"while"},{"location":"Cheat%20Sheets/JavaScript/#js-es6","text":"","title":"JS ES6"},{"location":"Cheat%20Sheets/JavaScript/#arrow-function","text":"const sum = ( a , b ) => a + b console . log ( sum ( 2 , 6 )) // OUTPUT: 8","title":"Arrow function"},{"location":"Cheat%20Sheets/JavaScript/#default-parameters","text":"function print ( a = 5 ) { console . log ( a ) } print () // OUTPUT: 5 print ( 22 ) // OUTPUT: 22","title":"Default parameters"},{"location":"Cheat%20Sheets/JavaScript/#let-scope","text":"let a = 3 if ( true ) { let a = 5 console . log ( a ) // OUTPUT: 5 } console . log ( a ) // OUTPUT: 3","title":"Let Scope"},{"location":"Cheat%20Sheets/JavaScript/#const","text":"// can be assigned only once const a = 55 a = 44 // throws an error","title":"Const"},{"location":"Cheat%20Sheets/JavaScript/#multiline-string","text":"console . log ( ` This is a multiline string ` )","title":"Multiline string"},{"location":"Cheat%20Sheets/JavaScript/#template-strings","text":"const name = 'World' ; const message = `Hello ${ name } ` ; console . log ( message ); // OUTPUT: \"Hello World\"","title":"Template strings"},{"location":"Cheat%20Sheets/JavaScript/#exponent-operator","text":"const byte = 2 ** 8 // Same as: Math.pow(2, 8)","title":"Exponent operator"},{"location":"Cheat%20Sheets/JavaScript/#spread-operator","text":"const a = [ 1 , 2 ] const b = [ 3 , 4 ] const c = [ ... a , ... b ] console . log ( c ) // OUTPUT: [1, 2, 3, 4]","title":"Spread operator"},{"location":"Cheat%20Sheets/JavaScript/#string-includes","text":"console . log ( 'apple' . includes ( 'pl' )); // OUTPUT: true console . log ( 'apple' . includes ( 'tt' )); // OUTPUT: false","title":"String includes()"},{"location":"Cheat%20Sheets/JavaScript/#string-startswith","text":"console . log ( 'apple' . startsWith ( 'ap' )); // OUTPUT: true console . log ( 'apple' . startsWith ( 'bb' )); // OUTPUT: false","title":"String startsWith()"},{"location":"Cheat%20Sheets/JavaScript/#string-repeat","text":"console . log ( 'ab' . repeat ( 3 )); // OUTPUT: \"ababab\"","title":"String repeat()"},{"location":"Cheat%20Sheets/JavaScript/#destructuring-array","text":"let [ a , b ] = [ 3 , 7 ]; console . log ( a ); // 3 console . log ( b ); // 7","title":"Destructuring array"},{"location":"Cheat%20Sheets/JavaScript/#destructuring-object","text":"let obj = { a : 55 , b : 44 }; let { a , b } = obj ; console . log ( a ); // OUTPUT: 55 console . log ( b ); // OUTPUT: 44","title":"Destructuring object"},{"location":"Cheat%20Sheets/JavaScript/#object-property-assignment","text":"const a = 2 const b = 5 const obj = { a , b } // Before es6: // obj = { a: a, b: b } console . log ( obj ) // OUTPUT: { a: 2, b: 5 }","title":"Object property assignment"},{"location":"Cheat%20Sheets/JavaScript/#object-function-assignment","text":"const obj = { a : 5 , b () { console . log ( 'b' ) } } obj . b () // OUTPUT: \"b\"","title":"Object function assignment"},{"location":"Cheat%20Sheets/JavaScript/#objectassign","text":"const obj1 = { a : 1 } const obj2 = { b : 2 } const obj3 = Object . assign ({}, obj1 , obj2 ) console . log ( obj3 ) // { a: 1, b: 2 }","title":"Object.assign()"},{"location":"Cheat%20Sheets/JavaScript/#objectentries","text":"const obj = { firstName : 'FirstName' , lastName : 'LastName' , age : 24 , country : 'India' , }; const entries = Object . entries ( obj ); /* returns an array of [key, value] pairs of the object passed */ console . log ( entries ); /* prints [ ['firstName', 'FirstName'], ['lastName', 'LastName'], ['age', 24], ['country', 'India'] ]; */","title":"Object.entries()"},{"location":"Cheat%20Sheets/JavaScript/#promises-with-finally","text":"promise . then (( result ) => { \u00b7\u00b7\u00b7 }) . catch (( error ) => { \u00b7\u00b7\u00b7 }) . finally (() => { /* logic independent of success/error */ }) /* The handler is called when the promise is fulflled or rejected.*/","title":"Promises with finally"},{"location":"Cheat%20Sheets/JavaScript/#destructuring-nested-objects","text":"const Person = { name : \"Harry Potter\" , age : 29 , sex : \"male\" , materialStatus : \"single\" , address : { country : \"USA\" , state : \"Nevada\" , city : \"Carson City\" , pinCode : \"500014\" , }, }; const { address : { state , pinCode }, name } = Person ; console . log ( name , state , pinCode ) // Harry Potter Nevada 500014 console . log ( city ) // ReferenceError","title":"Destructuring Nested Objects"},{"location":"Cheat%20Sheets/JavaScript/#spread-operator_1","text":"const a = { firstName : \"FirstName\" , lastName : \"LastName1\" , } const b = { ... a , lastName : \"LastName2\" , canSing : true , } console . log ( a ) //{firstName: \"FirstName\", lastName: \"LastName1\"} console . log ( b ) /* {firstName: \"FirstName\", lastName: \"LastName2\", canSing: true} */ /* great for modifying objects without side effects/affecting the original */","title":"Spread operator"},{"location":"Cheat%20Sheets/JavaScript/#arrays-destructuring","text":"","title":"Arrays destructuring"},{"location":"Cheat%20Sheets/JavaScript/#assigning-array-items-to-variables","text":"const [ a , b , c ] = [ 123 , 'second' , true ]; // a => 123 // b => 'second' // c => true","title":"Assigning array items to variables"},{"location":"Cheat%20Sheets/JavaScript/#skipping-items","text":"const [, b ] = [ 123 , 'second' , true ]; // b => 'second'","title":"Skipping items"},{"location":"Cheat%20Sheets/JavaScript/#assigning-the-first-values-storing-the-rest-together","text":"const [ a , b , ... rest ] = [ 123 , 'second' , true , false , 42 ]; // a => 123 // b => 'second' // rest => [true, false, 42]","title":"Assigning the first values, storing the rest together"},{"location":"Cheat%20Sheets/JavaScript/#swapping-variables","text":"let x = true ; let y = false ; [ x , y ] = [ y , x ]; // x => false // y => true","title":"Swapping variables"},{"location":"Cheat%20Sheets/JavaScript/#string-methods","text":"","title":"String methods"},{"location":"Cheat%20Sheets/JavaScript/#charat","text":"More on MDN let txt = 'Hello World' ; console . log ( txt . charAt ( 0 )); // OUTPUT: 'H'","title":"charAt()"},{"location":"Cheat%20Sheets/JavaScript/#concat","text":"More on MDN let str1 = 'Hello ' ; let str2 = 'World' ; console . log ( str1 . concat ( str2 )); // OUTPUT: 'Hello world';","title":"concat()"},{"location":"Cheat%20Sheets/JavaScript/#indexof","text":"More on MDN let txt = 'Lets find where the `pen` is' ; console . log ( txt . indexOf ( 'pen' )); // OUTPUT: 21","title":"indexOf()"},{"location":"Cheat%20Sheets/JavaScript/#replace","text":"More on MDN let str = 'Hello Dev!' console . log ( str . replace ( 'Dev' , 'World' )); // OUTPUT: 'Hello World'","title":"replace()"},{"location":"Cheat%20Sheets/JavaScript/#search","text":"More on MDN let str = 'Hello dev' ; console . log ( str . search ( 'dev' )); // OUTPUT: 6","title":"search()"},{"location":"Cheat%20Sheets/JavaScript/#slice","text":"More on MDN let str1 = 'The morning is upon us.' , // the length of str1 is 23. str2 = str1 . slice ( 1 , 8 ), str3 = str1 . slice ( 4 , - 2 ), str4 = str1 . slice ( 12 ), str5 = str1 . slice ( 30 ); console . log ( str2 ) // OUTPUT: he morn console . log ( str3 ) // OUTPUT: morning is upon u console . log ( str4 ) // OUTPUT: is upon us. console . log ( str5 ) // OUTPUT: \"\"","title":"slice()"},{"location":"Cheat%20Sheets/JavaScript/#substring","text":"More on MDN const str = 'Mozilla' ; console . log ( str . substring ( 1 , 3 )); // expected output: \"oz\" console . log ( str . substring ( 2 )); // expected output: \"zilla\"","title":"substring()"},{"location":"Cheat%20Sheets/JavaScript/#substr","text":"Deprecated. Not for use in new websites. More on MDN const str = 'Mozilla' ; console . log ( str . substr ( 1 , 2 )); // expected output: \"oz\" console . log ( str . substr ( 2 )); // expected output: \"zilla\" Difference between substr() and substring() let text = 'Mozilla' console . log ( text . substring ( 2 , 5 )) // => \"zil\" console . log ( text . substr ( 2 , 3 )) // => \"zil\"","title":"substr()"},{"location":"Cheat%20Sheets/JavaScript/#touppercase-tolowercase","text":"toUpperCase() on MDN | toLowerCase() on MDN const sentence = 'The quick brown fox jumps over the lazy dog.' ; console . log ( sentence . toUpperCase ()); // expected output: \"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\" const allcaps = 'HAPPY CAPSLOCK DAY!' ; console . log ( allcaps . toLowerCase ()); // EXPECTED OUTPOOT: \"HAPPY CAPSLOCK DAY!\"","title":"toUpperCase() / toLowerCase()"},{"location":"Cheat%20Sheets/JavaScript/#valueof","text":"More on MDN var x = new String ( 'Hello world' ); console . log ( x . valueOf ()); // Displays 'Hello world'","title":"valueOf()"},{"location":"Cheat%20Sheets/JavaScript/#trim","text":"Mode on MDN const greeting = ' Hello world! ' ; console . log ( greeting ); // expected output: \" Hello world! \"; console . log ( greeting . trim ()); // expected output: \"Hello world!\"; toString() More on MDN const myNumber = 535 ; console . log ( myNumber . toString ()); // OUTPUT: \"535\"; includes() More on MDN const sentence = 'The quick brown fox jumps over the lazy dog.' ; const word = 'fox' ; console . log ( sentence . includes ( word )); // OUTPUT: true charCodeAt() More on MDN let word = 'TEST' ; console . log ( word . charCodeAt ( 0 )); // OUTPUT: 84 match() More on MDN const paragraph = 'The quick brown fox jumps over the lazy dog. It barked.' ; const found = paragraph . match ( \"th\" ); console . log ( found ); // OUTPUT: [\"th\"] split() More on MDN const str = 'The quick brown fox jumps over the lazy dog.' ; const words = str . split ( ' ' ); console . log ( words [ 3 ]); // expected output: \"fox\"","title":"trim()"},{"location":"Cheat%20Sheets/JavaScript/#javascript-asyncawait","text":"","title":"JavaScript Async/Await"},{"location":"Cheat%20Sheets/JavaScript/#async","text":"When we append the keyword async to the function , this function returns the Promise by default on execution. Async keyword provides extra information to the user of the function: The function contains some Asynchronous Execution The returned value will be the Resolved Value for the Promise async function f () { return 1 ; } f (). then ( alert ); // OUTPUT: 1","title":"Async"},{"location":"Cheat%20Sheets/JavaScript/#await","text":"The keyword await makes JavaScript wait until that promise settles and returns its result The await works only inside async functions async function f () { let promise = new Promise (( resolve , reject ) => { setTimeout (() => resolve ( \"done!\" ), 1000 ) }); let result = await promise ; // wait until the promise resolves alert ( result ); // OUTPUT: \"done!\" } f ();","title":"Await"},{"location":"Cheat%20Sheets/JavaScript/#api-calls","text":"","title":"API calls"},{"location":"Cheat%20Sheets/JavaScript/#xml-http-request","text":"All modern browsers support the XMLHttpRequest object to request data from a server. It works on the oldest browsers as well as on new ones. It was deprecated in ES6 but is still widely used. var request = new XMLHttpRequest (); request . open ( 'GET' , 'https://jsonplaceholder.typicode.com/todos' ) request . send (); request . onload = () => { console . log ( JSON . parse ( request . response )); }","title":"XML HTTP Request"},{"location":"Cheat%20Sheets/JavaScript/#fetch","text":"The Fetch API provides an interface for fetching resources (including across the network) in an asynchronous manner. It returns a Promise It is an object which contains a single value either a Response or an Error that occurred. .then() tells the program what to do once Promise is completed. fetch ( 'https://jsonplaceholder.typicode.com/todos' ). then ( response => { return response . json (); }). then ( data => { console . log ( data ); })","title":"Fetch"},{"location":"Cheat%20Sheets/JavaScript/#axios","text":"It is an open-source library for making HTTP requests. It works on both Browsers and Node.js It can be included in an HTML file by using an external CDN It also returns promises like fetch API < script src = \"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\" >< /script> axios . get ( \"https://jsonplaceholder.typicode.com/todos\" ) . then ( response =>{ console . log ( response . data ) })","title":"Axios"},{"location":"Cheat%20Sheets/JavaScript/#jquery-ajax","text":"It performs asynchronous HTTP requests. Uses $.ajax() method to make the requests. < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\" > < /script> $ ( document ). ready ( function (){ $ . ajax ({ url : \"https://jsonplaceholder.typicode.com/todos\" , type : \"GET\" , success : function ( result ){ console . log ( result ); } }) })","title":"jQuery AJAX"},{"location":"Code%20Snippets/html/","text":"HTML HTML datalist < html > < h1 > Plain HTML search </ h1 > < input list = \"test\" placeholder = \"Choose from the list...\" /> < datalist id = \"test\" > < option value = \"Dainius\" > < option value = \"Dainius\" > < option value = \"Dainius\" > < option value = \"Dainius\" > < option value = \"Dainius\" > </ datalist > </ html >","title":"HTML"},{"location":"Code%20Snippets/html/#html","text":"HTML datalist < html > < h1 > Plain HTML search </ h1 > < input list = \"test\" placeholder = \"Choose from the list...\" /> < datalist id = \"test\" > < option value = \"Dainius\" > < option value = \"Dainius\" > < option value = \"Dainius\" > < option value = \"Dainius\" > < option value = \"Dainius\" > </ datalist > </ html >","title":"HTML"},{"location":"Code%20Snippets/js/","text":"JavaScript Alert/Prompt Gauti atsakym\u0105 \u012f klausim\u0105 i\u0161 prompt ir j\u012f pateikti, jei true , pakeisti \u012f prie\u0161ing\u0105 ir patekti, jei false : let answer = confirm ( 'Ar tavo PGR testas yra teigiamas?' ) if ( answer ) { alert ( answer + ' Sveikiname! tu sergi Covid ;)' ); } if ( ! answer ) { answer = ! answer ; alert ( answer + ' Sveikiname - tu pasveikai!' ) } Patikrinti, ar \u012f prompt atsakym\u0105 pateikstas skai\u010dius, ar kito tipo string : let answer = prompt ( '\u012eveskite bet k\u0105: ' ) if ( isNaN ( Number ( answer ))) { alert ( 'J\u016bs \u012fved\u0117te \"' + answer + '\", ta\u010diau tai - ne skai\u010dius.' ) } if ( ! isNaN ( answer )) { alert ( 'J\u016bs \u012fved\u0117te skai\u010di\u0173 ' + answer ); } //veikia ir su console.log() Programa 'Pilnametis' Paprastas variantas: let answer = prompt ( 'Kiek tau met\u0173: ' ) if ( Number ( answer ) < 18 ) { alert ( 'Iki 18 tau liko ' + ( 18 - answer )); } else if ( Number ( answer ) < 21 ) { alert ( 'Iki 21 tau liko ' + ( 21 - answer )); } else { alert ( 'Tu jau visi\u0161kai pilnametis!' ) } switch variantas: let answer = prompt ( 'Kiek tau met\u0173: ' ) switch ( answer ) { case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : case '10' : case '11' : case '12' : case '13' : case '14' : case '15' : case '16' : case '17' : alert ( 'Iki 18 tau liko ' + ( 18 - Number ( answer ))); break ; case '18' : case '19' : case '20' : alert ( 'Iki 21 tau liko ' + ( 21 - Number ( answer ))); break ; default : alert ( 'Tu jau visi\u0161kai pilnametis!' ) } 3. \"Pilnametis\" parenkant array element\u0105: let answer = prompt ( 'Kiek tau met\u0173: ' ) let i ; if ( Number ( answer ) < 18 ) { i = 0 } else if ( Number ( answer ) < 21 ) { i = 1 } else i = 2 ; let list = [ `Iki 18 tau liko ${ 18 - answer } ` , `Iki 21 tau liko ${ 21 - answer } ` , 'Tu jau visi\u0161kai pilnametis' ]; alert ( list [ i ]); Nam\u0173 darbai - sukurti objekt\u0105, j\u012f u\u017epildyti ir i\u0161vesti visk\u0105 \u012f kosol\u0119 ar alert\u0105 let vardas = prompt ( 'Koks tavo vardas: ' ); let amzius = prompt ( 'Kiek tau met\u0173: ' ); let miestas = prompt ( 'I\u0161 kokio miesto esi: ' ); let person = {}; person . vardas = vardas ; person . amzius = amzius ; person . miestas = miestas ; let i ; if ( Number ( amzius ) < 18 ) { i = 0 } else if ( Number ( amzius ) < 21 ) { i = 1 } else i = 2 ; let list = [ `Iki 18 tau liko ${ 18 - amzius } ` , `Iki 21 tau liko ${ 21 - amzius } ` , 'Tu jau visi\u0161kai pilnametis' ]; let answer = `Tavo vardas - ${ person . vardas } . Tavo miestas - ${ person . miestas } . Tavo am\u017eius - ${ person . amzius } . ${ list [ i ] } .` ; console . log ( answer ); alert ( answer ); Array and Object manipulation let kiek = prompt ( 'Keli\u0173 asmen\u0173 duomenis norite \u012fvesti: ' ); let counter = 0 ; let persons = []; while ( counter < kiek ) { let name = prompt ( 'Koks tavo vardas: ' ); let amzius = prompt ( 'Kiek tau met\u0173: ' ); let obj = { vardas : name , amzius : amzius , }; persons . push ( obj ); counter ++ ; } console . log ( persons );","title":"JavaScript"},{"location":"Code%20Snippets/js/#javascript","text":"","title":"JavaScript"},{"location":"Code%20Snippets/js/#alertprompt","text":"Gauti atsakym\u0105 \u012f klausim\u0105 i\u0161 prompt ir j\u012f pateikti, jei true , pakeisti \u012f prie\u0161ing\u0105 ir patekti, jei false : let answer = confirm ( 'Ar tavo PGR testas yra teigiamas?' ) if ( answer ) { alert ( answer + ' Sveikiname! tu sergi Covid ;)' ); } if ( ! answer ) { answer = ! answer ; alert ( answer + ' Sveikiname - tu pasveikai!' ) } Patikrinti, ar \u012f prompt atsakym\u0105 pateikstas skai\u010dius, ar kito tipo string : let answer = prompt ( '\u012eveskite bet k\u0105: ' ) if ( isNaN ( Number ( answer ))) { alert ( 'J\u016bs \u012fved\u0117te \"' + answer + '\", ta\u010diau tai - ne skai\u010dius.' ) } if ( ! isNaN ( answer )) { alert ( 'J\u016bs \u012fved\u0117te skai\u010di\u0173 ' + answer ); } //veikia ir su console.log()","title":"Alert/Prompt"},{"location":"Code%20Snippets/js/#programa-pilnametis","text":"Paprastas variantas: let answer = prompt ( 'Kiek tau met\u0173: ' ) if ( Number ( answer ) < 18 ) { alert ( 'Iki 18 tau liko ' + ( 18 - answer )); } else if ( Number ( answer ) < 21 ) { alert ( 'Iki 21 tau liko ' + ( 21 - answer )); } else { alert ( 'Tu jau visi\u0161kai pilnametis!' ) } switch variantas: let answer = prompt ( 'Kiek tau met\u0173: ' ) switch ( answer ) { case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : case '10' : case '11' : case '12' : case '13' : case '14' : case '15' : case '16' : case '17' : alert ( 'Iki 18 tau liko ' + ( 18 - Number ( answer ))); break ; case '18' : case '19' : case '20' : alert ( 'Iki 21 tau liko ' + ( 21 - Number ( answer ))); break ; default : alert ( 'Tu jau visi\u0161kai pilnametis!' ) } 3. \"Pilnametis\" parenkant array element\u0105: let answer = prompt ( 'Kiek tau met\u0173: ' ) let i ; if ( Number ( answer ) < 18 ) { i = 0 } else if ( Number ( answer ) < 21 ) { i = 1 } else i = 2 ; let list = [ `Iki 18 tau liko ${ 18 - answer } ` , `Iki 21 tau liko ${ 21 - answer } ` , 'Tu jau visi\u0161kai pilnametis' ]; alert ( list [ i ]);","title":"Programa 'Pilnametis'"},{"location":"Code%20Snippets/js/#namu-darbai-sukurti-objekta-ji-uzpildyti-ir-isvesti-viska-i-kosole-ar-alerta","text":"let vardas = prompt ( 'Koks tavo vardas: ' ); let amzius = prompt ( 'Kiek tau met\u0173: ' ); let miestas = prompt ( 'I\u0161 kokio miesto esi: ' ); let person = {}; person . vardas = vardas ; person . amzius = amzius ; person . miestas = miestas ; let i ; if ( Number ( amzius ) < 18 ) { i = 0 } else if ( Number ( amzius ) < 21 ) { i = 1 } else i = 2 ; let list = [ `Iki 18 tau liko ${ 18 - amzius } ` , `Iki 21 tau liko ${ 21 - amzius } ` , 'Tu jau visi\u0161kai pilnametis' ]; let answer = `Tavo vardas - ${ person . vardas } . Tavo miestas - ${ person . miestas } . Tavo am\u017eius - ${ person . amzius } . ${ list [ i ] } .` ; console . log ( answer ); alert ( answer );","title":"Nam\u0173 darbai - sukurti objekt\u0105, j\u012f u\u017epildyti ir i\u0161vesti visk\u0105 \u012f kosol\u0119 ar alert\u0105"},{"location":"Code%20Snippets/js/#array-and-object-manipulation","text":"let kiek = prompt ( 'Keli\u0173 asmen\u0173 duomenis norite \u012fvesti: ' ); let counter = 0 ; let persons = []; while ( counter < kiek ) { let name = prompt ( 'Koks tavo vardas: ' ); let amzius = prompt ( 'Kiek tau met\u0173: ' ); let obj = { vardas : name , amzius : amzius , }; persons . push ( obj ); counter ++ ; } console . log ( persons );","title":"Array and Object manipulation"}]}